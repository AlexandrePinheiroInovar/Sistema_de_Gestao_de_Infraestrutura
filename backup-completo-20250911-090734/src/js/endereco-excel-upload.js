// ============= SISTEMA DE UPLOAD EXCEL PARA TABELA DE ENDERE√áOS =============
console.log('üìä [ENDERECO-EXCEL] Inicializando sistema de upload Excel para endere√ßos...');

// ============= ORDEM EXATA DAS 25 COLUNAS =============
const COLUNAS_ENDERECO_EXATAS = [
    'Projeto', // 1
    'Sub Projeto', // 2
    'Tipo de A√ß√£o', // 3
    'CONTRATO', // 4
    'Condominio', // 5
    'ENDERE√áO', // 6
    'Cidade', // 7
    'PEP', // 8
    'COD IMOVEL GED', // 9
    'NODE GERENCIAL', // 10
    '√Årea T√©cnica', // 11
    'HP', // 12
    'ANDAR', // 13
    'DATA RECEBIMENTO', // 14
    'DATA INICIO', // 15
    'DATA FINAL', // 16
    'EQUIPE', // 17
    'Supervisor', // 18
    'Status', // 19
    'RDO', // 20
    'BOOK', // 21
    'PROJETO', // 22
    'JUSTIFICATIVA', // 23
    'Observa√ß√£o', // 24
    'Observa√ß√£o' // 25 (segunda coluna observa√ß√£o)
];

// ============= VARI√ÅVEIS GLOBAIS =============
let dadosEndereco = [];
let totalRegistros = 0;

// ============= INICIALIZA√á√ÉO =============
document.addEventListener('DOMContentLoaded', function () {
    console.log('üîß [ENDERECO-EXCEL] DOM carregado, configurando listeners...');

    // Aguardar XLSX carregar se necess√°rio
    function inicializar() {
        if (typeof XLSX === 'undefined') {
            console.warn('‚ö†Ô∏è [ENDERECO-EXCEL] Aguardando biblioteca XLSX carregar...');
            setTimeout(inicializar, 500);
            return;
        }

        console.log('‚úÖ [ENDERECO-EXCEL] XLSX carregado, iniciando sistema...');
        configurarUploadExcel();
        carregarDadosExistentes();
    }

    inicializar();
});

function configurarUploadExcel() {
    // Tentar ambos os IDs poss√≠veis
    let fileInput = document.getElementById('novoExcelUpload') || document.getElementById('excelUpload');
    
    if (fileInput) {
        console.log('‚úÖ [ENDERECO-EXCEL] Input encontrado:', fileInput.id);
        // Limpar listeners anteriores
        fileInput.replaceWith(fileInput.cloneNode(true));
        const newInput = document.getElementById(fileInput.id);

        // Adicionar novo listener
        newInput.addEventListener('change', processarUploadExcel);
        console.log('‚úÖ [ENDERECO-EXCEL] Listener configurado no input file:', fileInput.id);
    } else {
        console.warn('‚ö†Ô∏è [ENDERECO-EXCEL] Input file n√£o encontrado (tentou: #novoExcelUpload, #excelUpload)');
    }
}

// ============= PROCESSAMENTO DO UPLOAD =============
async function processarUploadExcel(event) {
    const arquivo = event.target.files[0];

    if (!arquivo) {
        console.log('üö´ [ENDERECO-EXCEL] Nenhum arquivo selecionado');
        return;
    }

    console.log('üìÇ [ENDERECO-EXCEL] Processando arquivo:', arquivo.name);

    // Validar extens√£o
    if (!validarArquivoExcel(arquivo)) {
        mostrarNotificacao('‚ùå Erro', 'Selecione apenas arquivos Excel (.xlsx ou .xls)', 'error');
        return;
    }

    try {
        mostrarNotificacao('üìä Processando...', 'Lendo arquivo Excel...', 'info');

        // Ler arquivo Excel
        const dadosExcel = await lerArquivoExcel(arquivo);

        if (!dadosExcel || !dadosExcel.data || dadosExcel.data.length === 0) {
            throw new Error('Arquivo Excel vazio ou inv√°lido');
        }

        console.log('‚úÖ [ENDERECO-EXCEL] Arquivo lido:', {
            linhas: dadosExcel.data.length,
            colunas: dadosExcel.headers.length,
            headers: dadosExcel.headers
        });

        // Validar estrutura das colunas
        const validacao = validarEstruturaColunas(dadosExcel.headers);
        if (!validacao.valido) {
            throw new Error(`Estrutura de colunas inv√°lida: ${validacao.erro}`);
        }

        // Mapear dados para estrutura exata
        const dadosMapeados = mapearDadosParaEstrutura(dadosExcel);

        // Confirmar com usu√°rio
        const confirmar = confirm(
            `üìä UPLOAD DE EXCEL DETECTADO\n\n` +
                `üìÅ Arquivo: ${arquivo.name}\n` +
                `üìã Linhas: ${dadosMapeados.length}\n` +
                `üìã Colunas: ${COLUNAS_ENDERECO_EXATAS.length} (estrutura correta)\n\n` +
                `‚úÖ Confirma o upload?`
        );

        if (!confirmar) {
            mostrarNotificacao('‚ÑπÔ∏è Cancelado', 'Upload cancelado pelo usu√°rio', 'info');
            return;
        }

        // Processar e salvar dados
        await salvarDadosNaTabela(dadosMapeados);

        // Garantir que dados aparecem na tabela
        console.log('üîç [ENDERECO-EXCEL] For√ßando atualiza√ß√£o da tabela...');
        await exibirDadosNaTabela(dadosMapeados);

        mostrarNotificacao(
            'üéâ Sucesso!',
            `${dadosMapeados.length} registros importados com sucesso!`,
            'success'
        );
    } catch (error) {
        console.error('‚ùå [ENDERECO-EXCEL] Erro no upload:', error);
        mostrarNotificacao('‚ùå Erro', `Erro no upload: ${error.message}`, 'error');
    } finally {
        // Limpar input
        event.target.value = '';
    }
}

// ============= LEITURA DO ARQUIVO EXCEL =============
function lerArquivoExcel(arquivo) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();

        reader.onload = function (e) {
            try {
                // Verificar se XLSX est√° dispon√≠vel
                if (typeof XLSX === 'undefined') {
                    throw new Error(
                        'Biblioteca XLSX n√£o carregada. Aguarde alguns segundos e tente novamente.'
                    );
                }

                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, {
                    type: 'array',
                    cellDates: true,
                    cellNF: false,
                    cellText: false,
                    raw: false
                });

                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];

                if (!worksheet['!ref']) {
                    throw new Error('Planilha est√° vazia');
                }

                // Converter para JSON preservando estrutura
                const jsonData = XLSX.utils.sheet_to_json(worksheet, {
                    header: 1,
                    raw: false,
                    dateNF: 'dd/mm/yyyy'
                });

                if (jsonData.length < 2) {
                    throw new Error('Planilha deve ter pelo menos cabe√ßalho e uma linha de dados');
                }

                // Separar headers e dados
                const headers = jsonData[0];
                console.log('üî• [EXCEL-DEBUG] Total de linhas no Excel (incluindo cabe√ßalho):', jsonData.length);
                console.log('üî• [EXCEL-DEBUG] Headers encontrados no Excel:', headers);
                console.log('üî• [EXCEL-DEBUG] Total de colunas:', headers.length);
                console.log('üî• [EXCEL-DEBUG] Primeira linha de dados:', jsonData[1]);
                
                const processedData = jsonData
                    .slice(1)
                    .filter((row, index) => {
                        // Filtro mais permissivo - aceitar linhas que tenham pelo menos 1 campo n√£o vazio
                        const hasValidData = row && Array.isArray(row) && row.some(cell => 
                            cell !== undefined && cell !== null && String(cell).trim() !== ''
                        );
                        
                        if (!hasValidData && index < 10) {
                            console.log(`‚ö†Ô∏è [ENDERECO-EXCEL] Linha ${index + 2} filtrada:`, row);
                        }
                        
                        return hasValidData;
                    }) // Filtrar linhas v√°lidas
                    .map(row => {
                        const rowObj = {};
                        headers.forEach((header, index) => {
                            // Garantir que row[index] existe e tratar valores undefined/null
                            const value =
                                row && row[index] !== undefined && row[index] !== null
                                    ? row[index]
                                    : '';
                            rowObj[header] = String(value).trim();
                        });
                        return rowObj;
                    });

                console.log('‚úÖ [ENDERECO-EXCEL] Processamento conclu√≠do:', {
                    totalLinhas: jsonData.length - 1,
                    linhasValidas: processedData.length,
                    colunas: headers.length
                });

                resolve({
                    headers: headers,
                    data: processedData,
                    totalRows: processedData.length,
                    totalColumns: headers.length
                });
            } catch (error) {
                console.error('‚ùå [ENDERECO-EXCEL] Erro ao ler Excel:', error);
                reject(new Error(`Erro ao processar Excel: ${error.message}`));
            }
        };

        reader.onerror = () => reject(new Error('Erro ao ler arquivo'));
        reader.readAsArrayBuffer(arquivo);
    });
}

// ============= VALIDA√á√ÉO DA ESTRUTURA =============
function validarEstruturaColunas(headers) {
    console.log('üîç [ENDERECO-EXCEL] Validando estrutura:', {
        headersEncontrados: headers,
        headersEsperados: COLUNAS_ENDERECO_EXATAS.slice(0, 10),
        totalEncontrados: headers.length,
        totalEsperados: COLUNAS_ENDERECO_EXATAS.length
    });

    // VALIDA√á√ÉO MAIS FLEX√çVEL - aceitar planilhas com estrutura similar
    
    // Verificar se existe pelo menos a coluna ENDERE√áO
    const temEndereco = headers.some(header => 
        header && (header.includes('ENDERE√áO') || header.includes('ENDERECO'))
    );

    if (!temEndereco) {
        return {
            valido: false,
            erro: 'Coluna ENDERE√áO n√£o encontrada'
        };
    }

    // S√≥ alertar sobre diferen√ßas, mas n√£o bloquear
    for (let i = 0; i < Math.min(headers.length, COLUNAS_ENDERECO_EXATAS.length); i++) {
        const esperada = COLUNAS_ENDERECO_EXATAS[i];
        const encontrada = headers[i];

        if (esperada !== encontrada) {
            console.warn(`‚ö†Ô∏è [ENDERECO-EXCEL] Coluna ${i + 1} diferente: Esperada "${esperada}", Encontrada "${encontrada}"`);
        }
    }

    console.log('‚úÖ [ENDERECO-EXCEL] Estrutura v√°lida!');
    return { valido: true };
}

// ============= MAPEAMENTO DE DADOS =============
function mapearDadosParaEstrutura(dadosExcel) {
    console.log('üîÑ [ENDERECO-EXCEL] Mapeando dados para estrutura...', {
        totalRegistros: dadosExcel.data.length,
        totalColunas: dadosExcel.headers.length,
        primeirasLinhas: dadosExcel.data.slice(0, 3)
    });

    const dadosMapeados = dadosExcel.data.map((linha, index) => {
        const linhaMapeada = {};

        // DEBUG: mostrar estrutura da linha para os primeiros registros
        if (index < 3) {
            console.log(`üîç [DEBUG] Linha ${index + 1}:`, {
                keysDispon√≠veis: Object.keys(linha),
                valores: linha,
                colunasEsperadas: COLUNAS_ENDERECO_EXATAS.slice(0, 5)
            });
        }

        // COPIAR TUDO BRUTALMENTE - SEM QUALQUER FILTRO
        console.log(`üî• [DEBUG-BRUTAL] Linha ${index + 1} - Headers dispon√≠veis:`, dadosExcel.headers);
        console.log(`üî• [DEBUG-BRUTAL] Linha ${index + 1} - Dados da linha:`, linha);
        
        // Copiar CADA campo individualmente
        for (const headerReal of dadosExcel.headers) {
            const valor = linha[headerReal];
            linhaMapeada[headerReal] = valor;
            
            // Log de CADA campo para primeira linha
            if (index === 0) {
                console.log(`üî• [COPIANDO] "${headerReal}" = "${valor}"`);
            }
        }
        
        // Tamb√©m copiar TUDO que existe no objeto linha (caso existam campos extras)
        for (const chave in linha) {
            if (linha.hasOwnProperty(chave)) {
                linhaMapeada[chave] = linha[chave];
                if (index === 0) {
                    console.log(`üî• [EXTRA] "${chave}" = "${linha[chave]}"`);
                }
            }
        }

        // Adicionar metadados
        linhaMapeada._rowIndex = index + 1;
        linhaMapeada._uploadTimestamp = new Date().toISOString();

        return linhaMapeada;
    });

    console.log('‚úÖ [ENDERECO-EXCEL] Dados mapeados:', dadosMapeados.length);
    return dadosMapeados;
}

// ============= SALVAR NA TABELA =============
async function salvarDadosNaTabela(dados) {
    console.log('üíæ [ENDERECO-EXCEL] Salvando dados na tabela...');

    // Armazenar dados globalmente
    dadosEndereco = dados;
    totalRegistros = dados.length;

    // Limpar tabela atual
    limparTabela();

    // Criar linhas na tabela
    const tbody = document.getElementById('enderecoTableBody');
    if (!tbody) {
        throw new Error('Corpo da tabela n√£o encontrado');
    }

    // Processar TODOS os registros sem limite
    const dadosParaExibir = dados; // TODOS os registros sem limite

    dadosParaExibir.forEach((linha, index) => {
        const tr = criarLinhaTabela(linha, index);
        tbody.appendChild(tr);
    });

    // Atualizar estat√≠sticas
    atualizarEstatisticas();

    // Salvar no Firebase (se dispon√≠vel)
    await salvarNoFirebase(dados);

    console.log('‚úÖ [ENDERECO-EXCEL] Dados salvos na tabela');
}

// ============= CRIA√á√ÉO DE LINHA DA TABELA =============
function criarLinhaTabela(dados, index) {
    const tr = document.createElement('tr');

    // DEBUG para primeira linha
    if (index === 0) {
        console.log('üîç [CRIAR-LINHA] Dados dispon√≠veis:', {
            keys: Object.keys(dados),
            primeiros5Valores: Object.fromEntries(Object.entries(dados).slice(0, 5))
        });
    }

    // Buscar por todas as chaves dispon√≠veis nos dados
    const keys = Object.keys(dados).filter(key => !key.startsWith('_')); // Excluir metadados
    
    // Criar c√©lulas para TODAS as chaves encontradas
    keys.forEach((key, indiceColuna) => {
        const td = document.createElement('td');
        
        let valor = dados[key] || '';
        
        // Formata√ß√£o b√°sica do valor
        if (typeof valor === 'object') {
            valor = JSON.stringify(valor);
        } else if (valor === null || valor === undefined) {
            valor = '';
        } else {
            valor = String(valor);
        }

        td.textContent = valor;
        td.setAttribute('data-column', indiceColuna + 1);
        td.title = `${key}: ${valor}`; // Tooltip com nome da coluna
        tr.appendChild(td);
    });

    // Adicionar coluna de a√ß√µes
    const tdAcoes = document.createElement('td');
    tdAcoes.innerHTML = `
        <button class="action-btn btn-edit" onclick="editarRegistro(${index})" title="Editar">
            ‚úèÔ∏è
        </button>
        <button class="action-btn btn-delete" onclick="excluirRegistro(${index})" title="Excluir">
            üóëÔ∏è
        </button>
    `;
    tr.appendChild(tdAcoes);

    return tr;
}

// ============= FUN√á√ïES AUXILIARES =============
function validarArquivoExcel(arquivo) {
    const extensoesValidas = ['.xlsx', '.xls'];
    const nomeArquivo = arquivo.name.toLowerCase();
    return extensoesValidas.some(ext => nomeArquivo.endsWith(ext));
}

function formatarData(valor) {
    if (!valor) {
        return '';
    }

    try {
        // Se j√° est√° no formato dd/mm/yyyy, retornar
        if (typeof valor === 'string' && /^\d{1,2}\/\d{1,2}\/\d{4}$/.test(valor)) {
            return valor;
        }

        // Tentar converter para data
        const data = new Date(valor);
        if (!isNaN(data.getTime())) {
            const dia = String(data.getDate()).padStart(2, '0');
            const mes = String(data.getMonth() + 1).padStart(2, '0');
            const ano = data.getFullYear();
            return `${dia}/${mes}/${ano}`;
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è [ENDERECO-EXCEL] Erro ao formatar data:', valor);
    }

    return valor;
}

function limparTabela() {
    const tbody = document.getElementById('enderecoTableBody');
    if (tbody) {
        tbody.innerHTML = '';
    }
}

function atualizarEstatisticas() {
    // Atualizar contadores da nova tabela
    const recordCount = document.getElementById('enderecoRecordCount');
    const lastUpdate = document.getElementById('enderecoLastUpdate');

    if (recordCount) {
        recordCount.textContent = `${totalRegistros} registros`;
    }

    if (lastUpdate) {
        const agora = new Date().toLocaleString('pt-BR');
        lastUpdate.textContent = `Atualizado em: ${agora}`;
    }

    // Atualizar cards de estat√≠sticas da se√ß√£o de endere√ßos
    const statTotalRegistros = document.getElementById('statTotalRegistros');
    if (statTotalRegistros) {
        statTotalRegistros.textContent = totalRegistros;
    }

    // Calcular estat√≠sticas adicionais
    if (dadosEndereco.length > 0) {
        // Endere√ßos √∫nicos
        const enderecosUnicos = new Set(
            dadosEndereco.map(item => item['ENDERE√áO'] || '').filter(e => e.trim() !== '')
        );
        const statEnderecosDistintos = document.getElementById('statEnderecosDistintos');
        if (statEnderecosDistintos) {
            statEnderecosDistintos.textContent = enderecosUnicos.size;
        }

        // Equipes √∫nicas
        const equipesUnicas = new Set(
            dadosEndereco.map(item => item['EQUIPE'] || '').filter(e => e.trim() !== '')
        );
        const statEquipesDistintas = document.getElementById('statEquipesDistintas');
        if (statEquipesDistintas) {
            statEquipesDistintas.textContent = equipesUnicas.size;
        }

        // Produtividade
        const produtivos = dadosEndereco.filter(
            item => (item['Status'] || '').toUpperCase() === 'PRODUTIVA'
        ).length;
        const produtividade =
            totalRegistros > 0 ? Math.round((produtivos / totalRegistros) * 100) : 0;
        const statProdutividade = document.getElementById('statProdutividade');
        if (statProdutividade) {
            statProdutividade.textContent = `${produtividade}%`;
        }
    }
}

async function salvarNoFirebase(dados) {
    try {
        if (window.firebase && window.firebase.firestore) {
            console.log('üíæ [ENDERECO-EXCEL] Salvando no Firebase...');

            const timestamp = firebase.firestore.FieldValue.serverTimestamp();
            const userId = firebase.auth().currentUser?.uid || 'anonymous';

            // Salvar em lotes
            const BATCH_SIZE = 25;
            let salvosCount = 0;

            for (let i = 0; i < dados.length; i += BATCH_SIZE) {
                // Criar novo batch para cada lote
                const batch = firebase.firestore().batch();
                const lote = dados.slice(i, i + BATCH_SIZE);

                lote.forEach(registro => {
                    // LOG COMPLETO DOS DADOS ORIGINAIS PARA DEBUG
                    if (salvosCount === 0) {
                        console.log('üî• [EXCEL-UPLOAD] Registro original completo:', {
                            keys: Object.keys(registro),
                            valores: registro,
                            totalCampos: Object.keys(registro).length
                        });
                    }

                    // CRIAR DOCUMENTO COM NOMES EXATOS DAS COLUNAS DO EXCEL
                    const docData = {};
                    
                    // Primeiro, garantir que TODAS as colunas esperadas existam (mesmo vazias)
                    const colunasEsperadas = [
                        'Projeto', 'Sub Projeto', 'Tipo de A√ß√£o', 'CONTRATO', 'Condominio',
                        'ENDERE√áO', 'Cidade', 'PEP', 'COD IMOVEL GED', 'NODE GERENCIAL',
                        '√Årea T√©cnica', 'HP', 'ANDAR', 'DATA RECEBIMENTO', 'DATA INICIO',
                        'DATA FINAL', 'Dias', 'EQUIPE', 'SUPERVISOR', 'STATUS', 'RDO',
                        'BOOK', 'COLABORADOR/BOOK', 'DATA BOOK', 'PROJETO', 
                        'COLABORADOR/PROJETO', 'DATA/PROJETO', 'JUSTIFICATIVA', 
                        'Observa√ß√£o', 'SOLU√á√ÉO', '< OU > QUE 30'
                    ];
                    
                    // Inicializar todas as colunas
                    colunasEsperadas.forEach(coluna => {
                        docData[coluna] = '';
                    });
                    
                    // Agora copiar os dados EXATOS da planilha, sobrescrevendo as vazias
                    Object.keys(registro).forEach(chaveExcel => {
                        let valor = registro[chaveExcel];
                        
                        // Limpar valores null/undefined
                        if (valor === null || valor === undefined) {
                            valor = '';
                        } else {
                            valor = String(valor).trim();
                        }
                        
                        // Salvar com o nome EXATO da coluna do Excel
                        docData[chaveExcel] = valor;
                        
                        // Debug para primeira linha
                        if (salvosCount === 0) {
                            console.log(`üî• [MAPEAMENTO] "${chaveExcel}" = "${valor}"`);
                        }
                    });
                    
                    // Metadados
                    docData.createdAt = timestamp;
                    docData.updatedAt = timestamp;
                    docData.createdBy = userId;
                    docData.source = 'excel_upload';

                    // Log final COMPLETO para primeira linha
                    if (salvosCount === 0) {
                        console.log('üéØ [FIRESTORE-FINAL] DOCUMENTO COMPLETO QUE SER√Å SALVO:', {
                            totalCampos: Object.keys(docData).length,
                            camposComDados: Object.keys(docData).filter(k => docData[k] !== '' && !k.startsWith('created') && !k.startsWith('updated')).length,
                            todosOsCampos: Object.keys(docData).filter(k => !k.startsWith('created') && !k.startsWith('updated')),
                            exemploCompleto: Object.fromEntries(
                                Object.entries(docData).filter(([k, v]) => !k.startsWith('created') && !k.startsWith('updated'))
                            )
                        });
                    }

                    const docRef = firebase.firestore().collection('enderecos').doc();
                    batch.set(docRef, docData);
                    salvosCount++;
                });

                // Commit do batch atual
                await batch.commit();
                console.log(
                    `‚úÖ [ENDERECO-EXCEL] Lote ${Math.floor(i / BATCH_SIZE) + 1} salvo no Firebase (${lote.length} registros)`
                );

                // Pausa entre lotes para evitar throttling
                if (i + BATCH_SIZE < dados.length) {
                    await new Promise(resolve => setTimeout(resolve, 200));
                }
            }

            console.log(`üéâ [ENDERECO-EXCEL] ${salvosCount} registros salvos no Firebase com estrutura completa`);
        }
    } catch (error) {
        console.error('‚ùå [ENDERECO-EXCEL] Erro ao salvar no Firebase:', error);
        throw error; // Re-throw para que o caller possa tratar
    }
}

// ============= CARREGAMENTO DE DADOS EXISTENTES =============
async function carregarDadosExistentes() {
    console.log('üì• [ENDERECO-EXCEL] Carregando dados existentes do Firestore...');

    try {
        if (window.firebase && window.firebase.firestore) {
            const snapshot = await firebase
                .firestore()
                .collection('enderecos')
                .orderBy('createdAt', 'desc')
                .get(); // REMOVIDO LIMITE - carregar todos os registros

            if (!snapshot.empty) {
                const dadosCarregados = [];

                snapshot.forEach(doc => {
                    const dados = doc.data();
                    dados._id = doc.id; // Adicionar ID do documento
                    dadosCarregados.push(dados);
                });

                console.log('‚úÖ [ENDERECO-EXCEL] Dados carregados:', dadosCarregados.length);

                // Armazenar dados globalmente
                dadosEndereco = dadosCarregados;
                totalRegistros = dadosCarregados.length;

                // Atualizar tabela
                await exibirDadosNaTabela(dadosCarregados);

                // Atualizar estat√≠sticas
                atualizarEstatisticas();
            } else {
                console.log('‚ÑπÔ∏è [ENDERECO-EXCEL] Nenhum dado encontrado no Firestore');
                verificarEstadoTabela();
            }
        } else {
            console.warn('‚ö†Ô∏è [ENDERECO-EXCEL] Firebase n√£o dispon√≠vel, aguardando...');
            // Tentar novamente em 2 segundos
            setTimeout(carregarDadosExistentes, 2000);
        }
    } catch (error) {
        console.error('‚ùå [ENDERECO-EXCEL] Erro ao carregar dados:', error);
        verificarEstadoTabela();
    }
}

async function exibirDadosNaTabela(dados) {
    console.log('üìä [ENDERECO-EXCEL] Exibindo dados na tabela...', dados.length, 'registros');

    // Limpar tabela atual
    limparTabela();

    // Criar linhas na tabela
    const tbody = document.getElementById('enderecoTableBody');
    if (!tbody) {
        console.error('‚ùå [ENDERECO-EXCEL] Corpo da tabela n√£o encontrado!');
        throw new Error('Corpo da tabela n√£o encontrado');
    }

    if (!dados || dados.length === 0) {
        console.warn('‚ö†Ô∏è [ENDERECO-EXCEL] Nenhum dado para exibir');
        verificarEstadoTabela();
        return;
    }

    // Processar TODOS os registros sem limite
    const dadosParaExibir = dados; // TODOS os registros sem limite

    dadosParaExibir.forEach((linha, index) => {
        try {
            const tr = criarLinhaTabela(linha, index);
            tbody.appendChild(tr);
        } catch (error) {
            console.error('‚ùå [ENDERECO-EXCEL] Erro ao criar linha:', error, linha);
        }
    });

    console.log(
        '‚úÖ [ENDERECO-EXCEL] Dados exibidos na tabela:',
        dadosParaExibir.length,
        'linhas adicionadas'
    );
}

// ============= FUN√á√ÉO DE RECARREGAMENTO =============
async function recarregarTabela() {
    console.log('üîÑ [ENDERECO-EXCEL] Recarregando tabela...');

    try {
        mostrarNotificacao('üîÑ Atualizando...', 'Carregando dados mais recentes...', 'info');
        await carregarDadosExistentes();
        mostrarNotificacao('‚úÖ Atualizado!', 'Tabela atualizada com sucesso', 'success');
    } catch (error) {
        console.error('‚ùå [ENDERECO-EXCEL] Erro ao recarregar:', error);
        mostrarNotificacao('‚ùå Erro', `Erro ao atualizar: ${error.message}`, 'error');
    }
}

function verificarEstadoTabela() {
    const tbody = document.getElementById('enderecoTableBody');
    if (tbody && tbody.children.length === 0) {
        // Mostrar estado vazio
        tbody.innerHTML = `
            <tr class="empty-state">
                <td colspan="26">
                    <div class="empty-state-content">
                        <div class="empty-icon">üìä</div>
                        <h3>Tabela Vazia</h3>
                        <p>Fa√ßa upload de uma planilha Excel para preencher a tabela</p>
                        <p><small>As colunas devem estar na ordem exata especificada</small></p>
                    </div>
                </td>
            </tr>
        `;
    }
}

// ============= FUN√á√ïES DE A√á√ÉO =============
window.editarRegistro = function (index) {
    console.log('‚úèÔ∏è [ENDERECO-EXCEL] Editando registro:', index);
    // Implementar edi√ß√£o
    alert('Fun√ß√£o de edi√ß√£o ser√° implementada em breve');
};

window.excluirRegistro = function (index) {
    console.log('üóëÔ∏è [ENDERECO-EXCEL] Excluindo registro:', index);
    if (confirm('Tem certeza que deseja excluir este registro?')) {
        // Remover do array
        dadosEndereco.splice(index, 1);
        totalRegistros--;

        // Recriar tabela
        salvarDadosNaTabela(dadosEndereco);

        mostrarNotificacao('‚úÖ Sucesso', 'Registro exclu√≠do com sucesso', 'success');
    }
};

// ============= FUN√á√ÉO DE NOTIFICA√á√ÉO =============
function mostrarNotificacao(titulo, mensagem, tipo) {
    if (window.showCustomNotification) {
        window.showCustomNotification(titulo, mensagem, tipo);
    } else {
        alert(`${titulo}: ${mensagem}`);
    }
}

// ============= EXPORTA√á√ÉO GLOBAL =============
window.COLUNAS_ENDERECO_EXATAS = COLUNAS_ENDERECO_EXATAS;
window.dadosEndereco = dadosEndereco;
window.processarUploadExcel = processarUploadExcel;
window.recarregarTabela = recarregarTabela;
window.carregarDadosExistentes = carregarDadosExistentes;

// ============= FUN√á√ÉO GLOBAL DE RECARREGAMENTO =============
window.reloadCompleteInterface = function () {
    console.log('üîÑ [ENDERECO-EXCEL] Recarregando interface completa...');
    recarregarTabela();
};

// ============= DEBUGGING =============
window.debugEnderecoSystem = function () {
    console.log('üîç [DEBUG] Estado do sistema:');
    console.log('- XLSX dispon√≠vel:', typeof XLSX !== 'undefined');
    console.log('- Firebase dispon√≠vel:', typeof firebase !== 'undefined');
    console.log('- Tabela existe:', !!document.getElementById('enderecoTableBody'));
    console.log('- Dados carregados:', dadosEndereco.length);
    console.log('- Total registros:', totalRegistros);
    console.log('- Input file existe:', !!(document.getElementById('novoExcelUpload') || document.getElementById('excelUpload')));
};

console.log('‚úÖ [ENDERECO-EXCEL] Sistema de upload Excel para endere√ßos carregado');
console.log(
    `üìã [ENDERECO-EXCEL] Configurado para ${COLUNAS_ENDERECO_EXATAS.length} colunas exatas`
);
