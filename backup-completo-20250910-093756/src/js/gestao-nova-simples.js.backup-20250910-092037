// ============= SISTEMA DE GEST√ÉO NOVO E SIMPLES =============
console.log('üöÄ [GESTAO-NOVA] Iniciando sistema de gest√£o novo...');

// ============= CONFIGURA√á√ïES COMPLETAS DAS COLE√á√ïES =============
const GESTAO_NOVA_CONFIG = {
    projetos: {
        column: 'Projeto',
        collection: 'nova_gestao_projetos',
        displayName: 'Projetos',
        description: 'Gerenciamento de projetos de telecomunica√ß√µes'
    },
    subprojetos: {
        column: 'Sub Projeto',
        collection: 'nova_gestao_subprojetos',
        displayName: 'Sub Projetos',
        description: 'Sub divis√µes dos projetos principais'
    },
    'tipos-acao': {
        column: 'Tipo de A√ß√£o',
        collection: 'nova_gestao_tipos_acao',
        displayName: 'Tipos de A√ß√£o',
        description: 'Tipos de a√ß√µes executadas em campo'
    },
    supervisores: {
        column: 'Supervisor',
        collection: 'nova_gestao_supervisores',
        displayName: 'Supervisores',
        description: 'Supervisores respons√°veis pelas equipes'
    },
    equipes: {
        column: 'EQUIPE',
        collection: 'nova_gestao_equipes',
        displayName: 'Equipes',
        description: 'Equipes de campo para execu√ß√£o dos servi√ßos'
    },
    cidades: {
        column: 'Cidade',
        collection: 'nova_gestao_cidades',
        displayName: 'Cidades',
        description: 'Cidades onde os servi√ßos s√£o executados'
    }
};

// ============= VARI√ÅVEIS =============
let dadosExtraidos = [];
let sistemaIniciado = false;

// Exportar para janela global
window.sistemaIniciado = false;

// ============= INICIALIZA√á√ÉO =============
document.addEventListener('DOMContentLoaded', function () {
    console.log('üîß [GESTAO-NOVA] DOM carregado, aguardando Firebase...');
    setTimeout(iniciarSistema, 2000);
});

async function iniciarSistema() {
    if (!window.firebase || !firebase.firestore) {
        console.warn('‚ö†Ô∏è [GESTAO-NOVA] Firebase n√£o dispon√≠vel, tentando novamente...');
        setTimeout(iniciarSistema, 1000);
        return;
    }

    console.log('‚úÖ [GESTAO-NOVA] Firebase dispon√≠vel, iniciando...');
    sistemaIniciado = true;
    window.sistemaIniciado = true;

    // Substituir fun√ß√£o principal
    window.showGestaoTab = mostrarNovaAba;
    window.mostrarNovaAba = mostrarNovaAba;

    // Verificar e criar cole√ß√µes se necess√°rio
    await verificarColecoes();

    console.log('‚úÖ [GESTAO-NOVA] Sistema iniciado e fun√ß√£o substitu√≠da!');
    console.log('üîç [GESTAO-NOVA] Verificando fun√ß√µes globais:');
    console.log('   - window.showGestaoTab:', typeof window.showGestaoTab);
    console.log('   - window.mostrarNovaAba:', typeof window.mostrarNovaAba);

    // AUTO-EXECUTAR: Carregar automaticamente a aba projetos ap√≥s 3 segundos
    setTimeout(async () => {
        console.log('üöÄ [AUTO-EXEC] Sistema pronto - aguardando intera√ß√£o do usu√°rio');
        console.log('üí° [AUTO-EXEC] Para testar, acesse qualquer aba de Gest√£o de Projetos');
    }, 3000);
}

// ============= VERIFICAR E CRIAR COLE√á√ïES =============
async function verificarColecoes() {
    console.log('üîç [COLE√á√ïES] Verificando todas as cole√ß√µes do Firebase...');

    for (const [_tabId, config] of Object.entries(GESTAO_NOVA_CONFIG)) {
        try {
            console.log(`üîç [COLE√á√ïES] Verificando cole√ß√£o: ${config.collection}`);

            // Tentar acessar a cole√ß√£o - Firebase criar√° automaticamente quando necess√°rio
            const snapshot = await firebase
                .firestore()
                .collection(config.collection)
                .limit(1)
                .get();

            console.log(`‚úÖ [COLE√á√ïES] ${config.collection}: ${snapshot.size} documentos`);
        } catch (error) {
            console.error(`‚ùå [COLE√á√ïES] Erro ao verificar ${config.collection}:`, error);
        }
    }

    console.log(
        'üéØ [COLE√á√ïES] Verifica√ß√£o completa - Firebase criar√° cole√ß√µes conforme necess√°rio'
    );
}

// ============= EXTRA√á√ÉO DE DADOS =============
function extrairDadosTabela() {
    console.log('üìä [GESTAO-NOVA] Extraindo dados da tabela...');

    const tbody = document.getElementById('enderecoTableBody');
    if (!tbody) {
        console.warn('‚ö†Ô∏è [GESTAO-NOVA] Tabela n√£o encontrada');
        return [];
    }

    const linhas = tbody.querySelectorAll('tr:not(.empty-state)');
    console.log(`üìä [GESTAO-NOVA] Encontradas ${linhas.length} linhas`);

    const dados = [];
    linhas.forEach(linha => {
        const colunas = linha.querySelectorAll('td');
        if (colunas.length >= 25) {
            dados.push({
                Projeto: colunas[0]?.textContent?.trim() || '',
                'Sub Projeto': colunas[1]?.textContent?.trim() || '',
                'Tipo de A√ß√£o': colunas[2]?.textContent?.trim() || '',
                Supervisor: colunas[17]?.textContent?.trim() || '',
                EQUIPE: colunas[16]?.textContent?.trim() || '',
                Cidade: colunas[6]?.textContent?.trim() || ''
            });
        }
    });

    dadosExtraidos = dados;
    console.log(`‚úÖ [GESTAO-NOVA] ${dados.length} registros extra√≠dos`);
    return dados;
}

// ============= EXTRA√á√ÉO DE DADOS DA TABELA ORIGINAL (REVERTED) =============
function extrairTodosOsDadosCompletos() {
    console.log('üìä [GESTAO-NOVA] SISTEMA REVERTIDO: Extraindo dados diretamente da tabela DOM...');

    const tbody = document.getElementById('enderecoTableBody');
    if (!tbody) {
        console.warn('‚ö†Ô∏è [GESTAO-NOVA] Tabela enderecoTableBody n√£o encontrada');
        return [];
    }

    const linhas = tbody.querySelectorAll('tr:not(.empty-state)');
    console.log(`üìä [GESTAO-NOVA] Encontradas ${linhas.length} linhas na tabela`);

    const dados = [];
    linhas.forEach((linha, index) => {
        const colunas = linha.querySelectorAll('td');
        if (colunas.length >= 25) {
            const registro = {
                Projeto: colunas[0]?.textContent?.trim() || '',
                'Sub Projeto': colunas[1]?.textContent?.trim() || '',
                'Tipo de A√ß√£o': colunas[2]?.textContent?.trim() || '',
                Supervisor: colunas[17]?.textContent?.trim() || '',
                EQUIPE: colunas[16]?.textContent?.trim() || '',
                Cidade: colunas[6]?.textContent?.trim() || ''
            };

            dados.push(registro);

            // Debug dos primeiros 3 registros
            if (index < 3) {
                console.log(`üîç [GESTAO-NOVA] Registro ${index + 1}:`, registro);
            }
        }
    });

    console.log(`‚úÖ [GESTAO-NOVA] ${dados.length} registros extra√≠dos da tabela DOM`);
    return dados;
}

// ============= FUN√á√ÉO PRINCIPAL =============
function mostrarNovaAba(tabId) {
    console.log(`üìë [GESTAO-NOVA] === MOSTRANDO ABA ${tabId.toUpperCase()} ===`);

    if (!sistemaIniciado) {
        console.warn('‚ö†Ô∏è [GESTAO-NOVA] Sistema n√£o iniciado, aguardando...');
        setTimeout(() => mostrarNovaAba(tabId), 1000);
        return;
    }

    // Atualizar interface das abas
    document.querySelectorAll('.gestao-tab-content').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.gestao-tab-btn').forEach(btn => btn.classList.remove('active'));

    const targetTab = document.getElementById(`gestao-${tabId}-tab`);
    if (targetTab) {
        targetTab.classList.add('active');
    }

    const activeButton = document.querySelector(`[onclick*="showGestaoTab('${tabId}'"]`);
    if (activeButton) {
        activeButton.classList.add('active');
    }

    // Carregar dados
    carregarDadosAba(tabId);
}

async function carregarDadosAba(tabId) {
    console.log(`üîÑ [GESTAO-NOVA] === CARREGANDO ${tabId.toUpperCase()} DIRETO DO FIRESTORE ===`);

    const config = GESTAO_NOVA_CONFIG[tabId];
    if (!config) {
        console.error(`‚ùå [GESTAO-NOVA] Configura√ß√£o n√£o encontrada para ${tabId}`);
        console.log(`üîç [GESTAO-NOVA] Configura√ß√µes dispon√≠veis:`, Object.keys(GESTAO_NOVA_CONFIG));
        return;
    }

    console.log(`üîç [GESTAO-NOVA] Config para ${tabId}:`, config);

    // Carregar dados DIRETO do Firestore (sem depender da tabela de endere√ßos)
    const dadosFirestore = [];
    let contadorUsos = {};
    
    try {
        // Carregar dados da cole√ß√£o espec√≠fica
        const snapshot = await firebase.firestore().collection(config.collection).get();
        snapshot.forEach(doc => {
            dadosFirestore.push({
                id: doc.id,
                ...doc.data(),
                source: 'firestore'
            });
        });
        console.log(`üî• [GESTAO-NOVA] ${dadosFirestore.length} dados carregados da cole√ß√£o ${config.collection}`);

        // Carregar dados da cole√ß√£o 'enderecos' para contar usos (se existir)
        try {
            const enderecosSnapshot = await firebase.firestore().collection('enderecos').get();
            enderecosSnapshot.forEach(doc => {
                const data = doc.data();
                const valor = data[config.column];
                if (valor && valor.trim()) {
                    contadorUsos[valor] = (contadorUsos[valor] || 0) + 1;
                }
            });
            console.log(`üìä [GESTAO-NOVA] Contador de usos criado da cole√ß√£o enderecos`);
        } catch (error) {
            console.log(`‚ÑπÔ∏è [GESTAO-NOVA] Cole√ß√£o enderecos n√£o dispon√≠vel para contagem:`, error.message);
        }

    } catch (error) {
        console.error(`‚ùå [GESTAO-NOVA] Erro ao carregar dados do Firestore:`, error);
        
        // Se n√£o h√° dados, criar dados de exemplo
        if (dadosFirestore.length === 0) {
            console.log(`üéØ [GESTAO-NOVA] Criando dados de exemplo para ${tabId}...`);
            await criarDadosExemplo();
            // Tentar carregar novamente
            const retrySnapshot = await firebase.firestore().collection(config.collection).get();
            retrySnapshot.forEach(doc => {
                dadosFirestore.push({
                    id: doc.id,
                    ...doc.data(),
                    source: 'firestore'
                });
            });
        }
    }

    // Preparar dados para renderiza√ß√£o
    const todosDados = dadosFirestore.map(item => ({
        id: item.id,
        nome: item.nome || 'Sem nome',
        descricao: item.descricao || 'Sem descri√ß√£o',
        status: item.status || 'ATIVO',
        source: 'firestore',
        count: contadorUsos[item.nome] || 0,
        createdAt: item.createdAt,
        isExample: item.isExample || false
    }));

    console.log(`‚úÖ [GESTAO-NOVA] ${todosDados.length} itens preparados para renderiza√ß√£o`);

    // Renderizar tabela
    renderizarTabela(tabId, todosDados);
}

function renderizarTabela(tabId, dados) {
    console.log(`üé® [GESTAO-NOVA] === RENDERIZANDO ${tabId.toUpperCase()} ===`);
    console.log(`üìä [GESTAO-NOVA] Total de dados recebidos: ${dados.length}`);

    // Mapear IDs corretos das tabelas (baseado no HTML real)
    const tableBodyIds = {
        projetos: 'projetosTableBody',
        subprojetos: 'subprojetosTableBody',
        'tipos-acao': 'tiposAcaoTableBody',
        supervisores: 'supervisoresTableBody',
        equipes: 'equipesTableBody',
        cidades: 'cidadesTableBody'
    };

    const tbodyId = tableBodyIds[tabId];
    console.log(`üéØ [GESTAO-NOVA] Procurando elemento: ${tbodyId}`);

    // Verificar todos os elementos com TableBody no ID
    const allTableBodies = document.querySelectorAll('[id*="TableBody"], [id*="tableBody"], [id*="tbody"]');
    console.log(`üîç [GESTAO-NOVA] Todos os elementos de tabela encontrados:`, 
        Array.from(allTableBodies).map(el => ({ id: el.id, tagName: el.tagName }))
    );

    let tbody = document.getElementById(tbodyId);
    
    // Se n√£o encontrou, tentar alternativas
    if (!tbody) {
        console.warn(`‚ö†Ô∏è [GESTAO-NOVA] Elemento ${tbodyId} n√£o encontrado, tentando alternativas...`);
        
        // Tentar nomes alternativos
        const alternativeIds = [
            `${tabId}TableBody`,
            `${tabId}tbody`,
            `table-${tabId}-body`,
            `gestao-${tabId}-tbody`
        ];
        
        for (const altId of alternativeIds) {
            tbody = document.getElementById(altId);
            if (tbody) {
                console.log(`‚úÖ [GESTAO-NOVA] Encontrado elemento alternativo: ${altId}`);
                break;
            }
        }
    }

    // Se ainda n√£o encontrou, tentar buscar dentro da aba ativa
    if (!tbody) {
        const activeTab = document.getElementById(`gestao-${tabId}-tab`);
        if (activeTab) {
            tbody = activeTab.querySelector('tbody');
            if (tbody) {
                console.log(`‚úÖ [GESTAO-NOVA] Tbody encontrado dentro da aba ativa`);
            }
        }
    }

    if (!tbody) {
        console.error(`‚ùå [GESTAO-NOVA] ERRO CR√çTICO: Tbody n√£o encontrado para ${tabId}`);
        console.error(`‚ùå Tentativas feitas:`, [tbodyId, ...alternativeIds]);
        
        // Mostrar notifica√ß√£o de erro ao usu√°rio
        if (typeof showNotification === 'function') {
            showNotification(`Erro: Tabela ${tabId} n√£o encontrada no HTML`, 'error');
        }
        return;
    }

    console.log(`‚úÖ [GESTAO-NOVA] Tbody encontrado:`, tbody.id || tbody.tagName);

    // Se n√£o h√° dados, mostrar mensagem
    if (!dados || dados.length === 0) {
        console.log(`‚ÑπÔ∏è [GESTAO-NOVA] Nenhum dado para renderizar em ${tabId}`);
        tbody.innerHTML = `
            <tr class="empty-state">
                <td colspan="6" style="text-align:center;padding:30px;color:#6b7280;">
                    <div style="font-size:16px;margin-bottom:10px;">üìù</div>
                    <div>Nenhum item encontrado</div>
                    <div style="font-size:12px;margin-top:5px;">
                        <button onclick="adicionarItem('${tabId}')" style="background:#10b981;color:white;border:none;padding:8px 16px;border-radius:6px;cursor:pointer;margin-top:10px;">
                            ‚ûï Adicionar Novo
                        </button>
                    </div>
                </td>
            </tr>
        `;
        return;
    }

    // Renderizar dados
    const htmlRows = dados.map((item, index) => {
        const statusColor = item.status === 'ATIVO' ? '#10b981' : '#ef4444';
        const isExample = item.isExample ? 'üéØ Exemplo' : 'üíæ Firestore';
        
        return `
            <tr data-id="${item.id}" style="border-bottom:1px solid #e5e7eb;">
                <td style="padding:12px 8px;font-weight:600;">${index + 1}</td>
                <td style="padding:12px 8px;">
                    <div style="font-weight:600;color:#1f2937;">${item.nome}</div>
                    <div style="font-size:10px;color:#6b7280;margin-top:2px;">
                        ${isExample}
                    </div>
                </td>
                <td style="padding:12px 8px;color:#4b5563;max-width:200px;">${item.descricao}</td>
                <td style="padding:12px 8px;">
                    <span style="background:#f3f4f6;color:#374151;padding:4px 8px;border-radius:12px;font-size:11px;font-weight:600;">
                        ${item.count} usos
                    </span>
                </td>
                <td style="padding:12px 8px;">
                    <span style="background:${statusColor};color:white;padding:4px 12px;border-radius:12px;font-size:11px;font-weight:600;">
                        ${item.status}
                    </span>
                </td>
                <td style="padding:12px 8px;">
                    <button onclick="editarItem('${tabId}', '${item.id}')" 
                            style="background:#f59e0b;color:white;border:none;padding:8px 10px;border-radius:6px;margin-right:5px;cursor:pointer;font-size:12px;" 
                            title="Editar item">
                        ‚úèÔ∏è
                    </button>
                    <button onclick="excluirItem('${tabId}', '${item.id}')" 
                            style="background:#ef4444;color:white;border:none;padding:8px 10px;border-radius:6px;cursor:pointer;font-size:12px;" 
                            title="Excluir item">
                        üóëÔ∏è
                    </button>
                </td>
            </tr>
        `;
    }).join('');

    tbody.innerHTML = htmlRows;
    console.log(`‚úÖ [GESTAO-NOVA] Tabela ${tabId} renderizada com ${dados.length} itens`);

    // Adicionar anima√ß√£o suave
    tbody.style.opacity = '0';
    setTimeout(() => {
        tbody.style.transition = 'opacity 0.3s ease';
        tbody.style.opacity = '1';
    }, 100);
}

// ============= FUN√á√ïES CRUD =============
async function adicionarItem(tabId) {
    const config = GESTAO_NOVA_CONFIG[tabId];
    const nome = prompt(`Adicionar novo item em ${tabId}:\n\nNome:`);
    if (!nome || !nome.trim()) {
        return;
    }

    const descricao = prompt(`Descri√ß√£o para "${nome}":`);

    try {
        await firebase
            .firestore()
            .collection(config.collection)
            .add({
                nome: nome.trim(),
                descricao: (descricao || '').trim(),
                status: 'ATIVO',
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });

        alert('‚úÖ Item adicionado com sucesso!');
        carregarDadosAba(tabId);
    } catch (error) {
        alert('‚ùå Erro: ' + error.message);
    }
}

async function salvarItem(tabId, nome) {
    const config = GESTAO_NOVA_CONFIG[tabId];
    const descricao = prompt(`Salvar "${nome}" no Firestore:\n\nDescri√ß√£o:`);

    try {
        await firebase
            .firestore()
            .collection(config.collection)
            .add({
                nome: nome.trim(),
                descricao: (descricao || '').trim(),
                status: 'ATIVO',
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });

        alert('‚úÖ Item salvo no Firestore!');
        carregarDadosAba(tabId);
    } catch (error) {
        alert('‚ùå Erro: ' + error.message);
    }
}

// ============= SALVAMENTO AUTOM√ÅTICO DIRETO E SIMPLES =============
async function salvarItensAutomaticamente(config, itensParaSalvar) {
    console.log(`üíæ [AUTO-SAVE] Salvando ${itensParaSalvar.length} itens em ${config.collection}`);

    for (const item of itensParaSalvar) {
        try {
            // Salvar diretamente no Firestore
            const docData = {
                nome: item.nome.trim(),
                descricao: `Extra√≠do da tabela de endere√ßos - ${new Date().toLocaleString()}`,
                status: 'ATIVO',
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                autoSaved: true
            };
            
            await firebase.firestore().collection(config.collection).add(docData);
            console.log(`‚úÖ Salvou: ${item.nome} ‚Üí ${config.collection}`);
            
        } catch (error) {
            console.error(`‚ùå Erro ao salvar ${item.nome}:`, error);
        }
    }

    console.log(`üéâ Salvamento conclu√≠do para ${config.collection}`);
}

async function editarItem(tabId, itemId) {
    if (itemId.startsWith('temp_')) {
        alert('‚ö†Ô∏è Salve este item no Firestore primeiro');
        return;
    }

    const config = GESTAO_NOVA_CONFIG[tabId];

    try {
        const doc = await firebase.firestore().collection(config.collection).doc(itemId).get();
        if (!doc.exists) {
            alert('‚ùå Item n√£o encontrado');
            return;
        }

        const data = doc.data();
        const novoNome = prompt('Editar nome:', data.nome);
        if (!novoNome) {
            return;
        }

        const novaDescricao = prompt('Editar descri√ß√£o:', data.descricao);

        const dadosNovos = {
            nome: novoNome.trim(),
            descricao: (novaDescricao || '').trim(),
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        };

        await firebase
            .firestore()
            .collection(config.collection)
            .doc(itemId)
            .update(dadosNovos);

        // Salvar log de edi√ß√£o
        if (typeof window.salvarLogAlteracao === 'function') {
            await window.salvarLogAlteracao(itemId, data, {...data, ...dadosNovos}, 'edit', `Editado no m√≥dulo ${config.title}`);
        }

        alert('‚úÖ Item atualizado!');
        carregarDadosAba(tabId);
    } catch (error) {
        alert('‚ùå Erro: ' + error.message);
    }
}

async function excluirItem(tabId, itemId) {
    if (!confirm('Excluir este item?')) {
        return;
    }

    const config = GESTAO_NOVA_CONFIG[tabId];

    try {
        // Buscar dados antes de excluir para o hist√≥rico
        const docSnapshot = await firebase.firestore().collection(config.collection).doc(itemId).get();
        const dadosAntigos = docSnapshot.exists ? docSnapshot.data() : {};
        
        await firebase.firestore().collection(config.collection).doc(itemId).delete();
        
        // Salvar log de exclus√£o
        if (typeof window.salvarLogAlteracao === 'function') {
            await window.salvarLogAlteracao(itemId, dadosAntigos, {}, 'delete', `Exclu√≠do do m√≥dulo ${config.title}`);
        }
        
        alert('‚úÖ Item exclu√≠do!');
        carregarDadosAba(tabId);
    } catch (error) {
        alert('‚ùå Erro: ' + error.message);
    }
}

// ============= EXPORTAR FUN√á√ïES =============
window.mostrarNovaAba = mostrarNovaAba;
window.adicionarItem = adicionarItem;
window.salvarItem = salvarItem;
window.editarItem = editarItem;
window.excluirItem = excluirItem;

// ============= DEBUG =============
window.debugGestaoNova = function () {
    console.log('üîç [DEBUG] Sistema iniciado:', sistemaIniciado);
    console.log('üîç [DEBUG] Firebase:', !!(window.firebase && firebase.firestore));

    const dados = extrairDadosTabela();
    console.log('üîç [DEBUG] Dados extra√≠dos:', dados.length);

    if (dados.length > 0) {
        console.log('üîç [DEBUG] Amostra:', {
            Projeto: dados[0].Projeto,
            SubProjeto: dados[0]['Sub Projeto'],
            TipoAcao: dados[0]['Tipo de A√ß√£o'],
            Supervisor: dados[0].Supervisor,
            Equipe: dados[0].EQUIPE,
            Cidade: dados[0].Cidade
        });

        // Debug espec√≠fico para tipos de a√ß√£o
        const tiposUnicos = [
            ...new Set(dados.map(d => d['Tipo de A√ß√£o']).filter(t => t && t.trim()))
        ];
        console.log('üîç [DEBUG] Tipos de A√ß√£o √∫nicos:', tiposUnicos);
    }

    return { sistemaIniciado, dados: dados.length };
};

window.debugTiposAcao = function () {
    console.log('üîç [DEBUG-TIPOS] === DEBUG ESPEC√çFICO TIPOS DE A√á√ÉO ===');

    // Verificar DOM primeiro
    console.log('üîç [DEBUG-TIPOS] DOM Ready State:', document.readyState);
    console.log('üîç [DEBUG-TIPOS] Sistema iniciado:', sistemaIniciado);

    // Verificar todos os elementos TableBody
    const allTableBodies = document.querySelectorAll('[id*="TableBody"]');
    console.log(
        'üîç [DEBUG-TIPOS] Todos os TableBodies:',
        Array.from(allTableBodies).map(el => el.id)
    );

    // Verificar especificamente o elemento que procuramos
    const tbody = document.getElementById('tiposAcaoTableBody');
    console.log('üîç [DEBUG-TIPOS] Tbody tiposAcaoTableBody existe:', !!tbody);

    if (tbody) {
        console.log('üîç [DEBUG-TIPOS] Tbody parent:', tbody.parentElement?.tagName);
        console.log('üîç [DEBUG-TIPOS] Tbody className:', tbody.className);
        console.log('üîç [DEBUG-TIPOS] HTML atual do tbody:', tbody.innerHTML.slice(0, 200));
    }

    // Verificar dados da tabela
    const dados = extrairDadosTabela();
    const tiposAcao = dados.map(d => d['Tipo de A√ß√£o']).filter(t => t && t.trim());
    const tiposUnicos = [...new Set(tiposAcao)];

    console.log('üîç [DEBUG-TIPOS] Total dados extra√≠dos:', dados.length);
    console.log('üîç [DEBUG-TIPOS] Tipos de a√ß√£o encontrados:', tiposAcao.length);
    console.log('üîç [DEBUG-TIPOS] Tipos √∫nicos:', tiposUnicos);
    console.log('üîç [DEBUG-TIPOS] Primeiro tipo:', tiposAcao[0]);

    // Tentar carregar manualmente
    console.log('üîç [DEBUG-TIPOS] Tentando carregar manualmente...');
    carregarDadosAba('tipos-acao');

    return {
        domReady: document.readyState,
        sistemaIniciado,
        tbodyExists: !!tbody,
        dados: dados.length,
        tipos: tiposUnicos,
        allTableBodies: Array.from(allTableBodies).map(el => el.id)
    };
};

// ============= FUN√á√ÉO PARA CRIAR DADOS DE EXEMPLO =============
async function criarDadosExemplo() {
    console.log('üéØ [EXEMPLO] Criando dados de exemplo para gest√£o...');
    
    const dadosExemplo = {
        'nova_gestao_projetos': [
            { nome: 'MDU RESIDENCIAL', descricao: 'Projetos de infraestrutura residencial', status: 'ATIVO' },
            { nome: 'FIBRA CORPORATIVA', descricao: 'Projetos de conectividade empresarial', status: 'ATIVO' },
            { nome: 'EXPANS√ÉO URBANA', descricao: 'Expans√£o de rede em √°reas urbanas', status: 'ATIVO' }
        ],
        'nova_gestao_subprojetos': [
            { nome: 'INSTALA√á√ÉO', descricao: 'Sub-projeto de instala√ß√£o', status: 'ATIVO' },
            { nome: 'MANUTEN√á√ÉO', descricao: 'Sub-projeto de manuten√ß√£o', status: 'ATIVO' },
            { nome: 'UPGRADE', descricao: 'Sub-projeto de upgrade', status: 'ATIVO' }
        ],
        'nova_gestao_tipos_acao': [
            { nome: 'INSTALA√á√ÉO NOVA', descricao: 'Instala√ß√£o de nova infraestrutura', status: 'ATIVO' },
            { nome: 'REPARO', descricao: 'Reparo de equipamentos', status: 'ATIVO' },
            { nome: 'SURVEY', descricao: 'Levantamento t√©cnico', status: 'ATIVO' }
        ],
        'nova_gestao_supervisores': [
            { nome: 'Jo√£o Silva', descricao: 'Supervisor T√©cnico Senior', status: 'ATIVO' },
            { nome: 'Maria Santos', descricao: 'Supervisora de Campo', status: 'ATIVO' },
            { nome: 'Carlos Oliveira', descricao: 'Supervisor de Projetos', status: 'ATIVO' }
        ],
        'nova_gestao_equipes': [
            { nome: 'EQUIPE A', descricao: 'Equipe de instala√ß√£o residencial', status: 'ATIVO' },
            { nome: 'EQUIPE B', descricao: 'Equipe de manuten√ß√£o', status: 'ATIVO' },
            { nome: 'EQUIPE C', descricao: 'Equipe de projetos especiais', status: 'ATIVO' }
        ],
        'nova_gestao_cidades': [
            { nome: 'S√£o Paulo', descricao: 'Capital de S√£o Paulo', status: 'ATIVO' },
            { nome: 'Rio de Janeiro', descricao: 'Capital do Rio de Janeiro', status: 'ATIVO' },
            { nome: 'Belo Horizonte', descricao: 'Capital de Minas Gerais', status: 'ATIVO' }
        ]
    };
    
    for (const [collection, items] of Object.entries(dadosExemplo)) {
        try {
            for (const item of items) {
                const docData = {
                    ...item,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    autoSaved: true,
                    isExample: true
                };
                
                await firebase.firestore().collection(collection).add(docData);
                console.log(`‚úÖ Criado: ${item.nome} ‚Üí ${collection}`);
            }
        } catch (error) {
            console.error(`‚ùå Erro ao criar dados de exemplo para ${collection}:`, error);
        }
    }
    
    console.log('üéâ Dados de exemplo criados com sucesso!');
}

// ============= FUN√á√ÉO DE DEBUG COMPLETA =============
window.testarDadosGestaoCompleto = function () {
    console.log('üß™ [TESTE-GESTAO] === TESTE COMPLETO DE DADOS ===');

    console.log('1Ô∏è‚É£ Verificando FirebaseTableSystem...');
    if (window.FirebaseTableSystem && window.FirebaseTableSystem.getData) {
        const dados = window.FirebaseTableSystem.getData();
        console.log('‚úÖ FirebaseTableSystem.getData():', dados?.length || 'vazio');
        if (dados && dados.length > 0) {
            console.log('üìÑ Primeiro registro:', dados[0]);
            console.log('üìÑ Campos dispon√≠veis:', Object.keys(dados[0]));
        }
    } else {
        console.log('‚ùå FirebaseTableSystem n√£o dispon√≠vel');
    }

    console.log('2Ô∏è‚É£ Verificando window.currentFirebaseData...');
    if (window.currentFirebaseData) {
        console.log('‚úÖ currentFirebaseData:', window.currentFirebaseData.length);
        if (window.currentFirebaseData.length > 0) {
            console.log('üìÑ Primeiro registro:', window.currentFirebaseData[0]);
        }
    } else {
        console.log('‚ùå currentFirebaseData n√£o dispon√≠vel');
    }

    console.log('3Ô∏è‚É£ Testando fun√ß√£o de extra√ß√£o...');
    const dadosExtraidos = extrairTodosOsDadosCompletos();
    console.log('üìä Dados extra√≠dos:', dadosExtraidos.length);
    if (dadosExtraidos.length > 0) {
        console.log('üìÑ Exemplo de dados extra√≠dos:', dadosExtraidos[0]);
    }

    console.log('4Ô∏è‚É£ Testando carregar dados da aba projetos...');
    try {
        carregarDadosAba('projetos');
    } catch (error) {
        console.error('‚ùå Erro ao carregar dados da aba:', error);
    }

    console.log('üß™ [TESTE-GESTAO] === FIM DO TESTE ===');
    console.log(
        'üí° Para testar: V√° para Cadastro de Endere√ßos primeiro, depois volte e execute este teste'
    );
};

// ============= TESTE COMPLETO DO SISTEMA ATUALIZADO =============
window.testarSistemaCompleto = async function () {
    console.log('üöÄ [TESTE-COMPLETO] === TESTE COMPLETO DO SISTEMA ATUALIZADO ===');

    console.log('1Ô∏è‚É£ Verificando estado do sistema...');
    console.log('   ‚úì Sistema iniciado:', sistemaIniciado);
    console.log('   ‚úì Firebase dispon√≠vel:', !!(window.firebase && firebase.firestore));

    console.log('2Ô∏è‚É£ Testando extra√ß√£o de dados da tabela DOM...');
    const dadosExtraidos = extrairTodosOsDadosCompletos();
    console.log(`   ‚úì Dados extra√≠dos: ${dadosExtraidos.length} registros`);

    if (dadosExtraidos.length > 0) {
        console.log('   ‚úì Exemplo de dados:', dadosExtraidos[0]);

        // Teste espec√≠fico para cada configura√ß√£o
        for (const [_tabId, config] of Object.entries(GESTAO_NOVA_CONFIG)) {
            const valoresUnicos = [
                ...new Set(
                    dadosExtraidos
                        .map(item => item[config.column])
                        .filter(valor => valor && valor.trim() !== '')
                )
            ];
            console.log(`   ‚úì ${config.displayName}: ${valoresUnicos.length} valores √∫nicos`);
        }
    } else {
        console.warn('   ‚ö†Ô∏è Nenhum dado extra√≠do - v√° para Cadastro de Endere√ßos primeiro');
        return { status: 'error', message: 'Nenhum dado na tabela' };
    }

    console.log('3Ô∏è‚É£ Testando cole√ß√µes do Firebase...');
    try {
        await verificarColecoes();
        console.log('   ‚úÖ Verifica√ß√£o de cole√ß√µes conclu√≠da');
    } catch (error) {
        console.error('   ‚ùå Erro na verifica√ß√£o de cole√ß√µes:', error);
    }

    console.log('4Ô∏è‚É£ Testando carregamento de uma aba (projetos)...');
    try {
        await carregarDadosAba('projetos');
        console.log('   ‚úÖ Aba projetos carregada com sucesso');
    } catch (error) {
        console.error('   ‚ùå Erro ao carregar aba projetos:', error);
    }

    console.log('üéØ [TESTE-COMPLETO] Sistema pronto para uso!');
    console.log('üí° Para usar: Acesse qualquer aba do m√≥dulo de Gest√£o');

    return {
        status: 'success',
        dadosExtraidos: dadosExtraidos.length,
        sistemaIniciado,
        firebaseDisponivel: !!(window.firebase && firebase.firestore)
    };
};

// ============= FUN√á√ÉO PARA TESTAR RAPIDAMENTE =============
window.testarGestaoRapido = async function(tabId = 'projetos') {
    console.log(`üß™ [TESTE-R√ÅPIDO] Testando aba ${tabId}...`);
    
    if (!sistemaIniciado) {
        console.log('‚ö†Ô∏è Sistema n√£o iniciado, aguarde...');
        return;
    }
    
    try {
        await mostrarNovaAba(tabId);
        console.log(`‚úÖ Teste da aba ${tabId} conclu√≠do`);
    } catch (error) {
        console.error(`‚ùå Erro no teste:`, error);
    }
};

console.log('‚úÖ [GESTAO-NOVA] Sistema atualizado - carrega dados DIRETO do Firestore!');
console.log('üß™ TESTE R√ÅPIDO: testarGestaoRapido("projetos")');
console.log('üß™ TESTE COMPLETO: testarSistemaCompleto()');
console.log('üß™ Debug: debugGestaoNova()');
console.log('üí° NOVO: N√£o depende mais da tabela de endere√ßos!');
