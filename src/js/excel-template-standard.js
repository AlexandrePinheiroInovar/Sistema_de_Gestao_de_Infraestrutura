// ============= SISTEMA PADR√ÉO DE TEMPLATE EXCEL =============
console.log('üìã [EXCEL-TEMPLATE] Inicializando sistema de template padr√£o...');

// ============= COLUNAS PADR√ÉO EXATAS - ORDEM FIXA =============
const STANDARD_COLUMNS = [
    'Projeto',
    'Sub Projeto',
    'Tipo de A√ß√£o', 
    'CONTRATO',
    'Condominio',
    'ENDERE√áO',
    'Cidade',
    'PEP',
    'COD IMOVEL GED',
    'NODE GERENCIAL',
    '√Årea T√©cnica',
    'HP',
    'ANDAR',
    'DATA RECEBIMENTO',
    'DATA INICIO',
    'DATA FINAL',
    'EQUIPE',
    'Supervisor',
    'Status',
    'RDO',
    'BOOK',
    'PROJETO',
    'JUSTIFICATIVA',
    'Observa√ß√£o',
    'Observa√ß√£o'
];

// ============= MAPEAMENTO DE VALIDA√á√ÉO =============
const COLUMN_VALIDATION = {
    'Projeto': { required: true, type: 'text', maxLength: 50 },
    'Sub Projeto': { required: false, type: 'text', maxLength: 50 },
    'Tipo de A√ß√£o': { required: true, type: 'select', options: ['Vistoria', 'Constru√ß√£o', 'Ativa√ß√£o', 'Manuten√ß√£o'] },
    'CONTRATO': { required: false, type: 'text', maxLength: 30 },
    'Condominio': { required: false, type: 'text', maxLength: 100 },
    'ENDERE√áO': { required: true, type: 'text', maxLength: 200 },
    'Cidade': { required: true, type: 'text', maxLength: 50 },
    'PEP': { required: false, type: 'text', maxLength: 20 },
    'COD IMOVEL GED': { required: false, type: 'text', maxLength: 30 },
    'NODE GERENCIAL': { required: false, type: 'text', maxLength: 30 },
    '√Årea T√©cnica': { required: false, type: 'text', maxLength: 50 },
    'HP': { required: false, type: 'number', min: 0, max: 999 },
    'ANDAR': { required: false, type: 'text', maxLength: 10 },
    'DATA RECEBIMENTO': { required: false, type: 'date', format: 'dd/mm/yyyy' },
    'DATA INICIO': { required: false, type: 'date', format: 'dd/mm/yyyy' },
    'DATA FINAL': { required: false, type: 'date', format: 'dd/mm/yyyy' },
    'EQUIPE': { required: true, type: 'text', maxLength: 50 },
    'Supervisor': { required: true, type: 'text', maxLength: 50 },
    'Status': { required: true, type: 'select', options: ['Pendente', 'Em Andamento', 'Conclu√≠do', 'Cancelado'] },
    'RDO': { required: false, type: 'text', maxLength: 20 },
    'BOOK': { required: false, type: 'text', maxLength: 20 },
    'PROJETO': { required: false, type: 'text', maxLength: 50 },
    'JUSTIFICATIVA': { required: false, type: 'text', maxLength: 500 },
    'Observa√ß√£o': { required: false, type: 'text', maxLength: 500 }
};

// ============= FUN√á√ïES DE TEMPLATE =============
function generateStandardTemplate() {
    console.log('üìÑ [EXCEL-TEMPLATE] Gerando template padr√£o...');
    
    try {
        // Criar dados de exemplo preservando ordem exata
        const templateData = [];
        
        // Linha de exemplo com todas as colunas na ordem correta
        const exemploLinha = {};
        STANDARD_COLUMNS.forEach((coluna, index) => {
            switch(coluna) {
                case 'Projeto': 
                    exemploLinha[coluna] = 'CLARO FIBRA';
                    break;
                case 'Sub Projeto': 
                    exemploLinha[coluna] = 'Expans√£o Residencial';
                    break;
                case 'Tipo de A√ß√£o': 
                    exemploLinha[coluna] = 'Vistoria';
                    break;
                case 'CONTRATO': 
                    exemploLinha[coluna] = 'CT-2024-001';
                    break;
                case 'Condominio': 
                    exemploLinha[coluna] = 'Edif√≠cio Sol Nascente';
                    break;
                case 'ENDERE√áO': 
                    exemploLinha[coluna] = 'Rua das Flores, 123 - Centro';
                    break;
                case 'Cidade': 
                    exemploLinha[coluna] = 'S√£o Paulo';
                    break;
                case 'PEP': 
                    exemploLinha[coluna] = 'PEP001';
                    break;
                case 'COD IMOVEL GED': 
                    exemploLinha[coluna] = 'GED123456';
                    break;
                case 'NODE GERENCIAL': 
                    exemploLinha[coluna] = 'NODE-SP-01';
                    break;
                case '√Årea T√©cnica': 
                    exemploLinha[coluna] = 'Infraestrutura';
                    break;
                case 'HP': 
                    exemploLinha[coluna] = '50';
                    break;
                case 'ANDAR': 
                    exemploLinha[coluna] = '5¬∫';
                    break;
                case 'DATA RECEBIMENTO': 
                    exemploLinha[coluna] = '01/08/2024';
                    break;
                case 'DATA INICIO': 
                    exemploLinha[coluna] = '05/08/2024';
                    break;
                case 'DATA FINAL': 
                    exemploLinha[coluna] = '10/08/2024';
                    break;
                case 'EQUIPE': 
                    exemploLinha[coluna] = 'Alpha Team';
                    break;
                case 'Supervisor': 
                    exemploLinha[coluna] = 'Jo√£o Silva';
                    break;
                case 'Status': 
                    exemploLinha[coluna] = 'Em Andamento';
                    break;
                case 'RDO': 
                    exemploLinha[coluna] = 'RDO001';
                    break;
                case 'BOOK': 
                    exemploLinha[coluna] = 'BOOK001';
                    break;
                case 'PROJETO': 
                    exemploLinha[coluna] = 'PROJETO PRINCIPAL';
                    break;
                case 'JUSTIFICATIVA': 
                    exemploLinha[coluna] = 'Vistoria para instala√ß√£o de nova infraestrutura';
                    break;
                case 'Observa√ß√£o': 
                    if (index === STANDARD_COLUMNS.lastIndexOf('Observa√ß√£o')) {
                        exemploLinha[coluna + '_2'] = 'Cliente dispon√≠vel manh√£s';
                    } else {
                        exemploLinha[coluna] = 'Primeiro acesso realizado';
                    }
                    break;
                default:
                    exemploLinha[coluna] = '';
            }
        });
        
        templateData.push(exemploLinha);

        // Criar workbook
        const workbook = XLSX.utils.book_new();
        
        // Criar worksheet
        const worksheet = XLSX.utils.json_to_sheet(templateData);
        
        // Configurar larguras das colunas otimizadas
        const columnWidths = STANDARD_COLUMNS.map(column => {
            switch(column) {
                case 'ENDERE√áO': return { wch: 40 };
                case 'Condominio': return { wch: 35 };
                case 'JUSTIFICATIVA': return { wch: 50 };
                case 'Observa√ß√£o': return { wch: 30 };
                case 'Projeto': return { wch: 25 };
                case 'Sub Projeto': return { wch: 25 };
                case 'EQUIPE': return { wch: 20 };
                case 'Supervisor': return { wch: 20 };
                case 'Cidade': return { wch: 18 };
                case 'Tipo de A√ß√£o': return { wch: 15 };
                case 'DATA RECEBIMENTO':
                case 'DATA INICIO':
                case 'DATA FINAL': return { wch: 15 };
                case 'COD IMOVEL GED':
                case 'NODE GERENCIAL': return { wch: 15 };
                case '√Årea T√©cnica': return { wch: 15 };
                case 'CONTRATO': return { wch: 12 };
                case 'Status': return { wch: 12 };
                case 'PEP': return { wch: 10 };
                case 'ANDAR':
                case 'HP': return { wch: 8 };
                default: return { wch: 12 };
            }
        });
        
        worksheet['!cols'] = columnWidths;
        
        // Adicionar coment√°rios nas c√©lulas do cabe√ßalho
        addHeaderComments(worksheet);
        
        // Adicionar worksheet ao workbook
        XLSX.utils.book_append_sheet(workbook, worksheet, 'Cadastro Padr√£o');
        
        // Gerar e baixar arquivo
        const fileName = `Template_Sala_Tecnica_${new Date().toISOString().slice(0,10)}.xlsx`;
        XLSX.writeFile(workbook, fileName);
        
        console.log('‚úÖ [EXCEL-TEMPLATE] Template gerado:', fileName);
        
        showTemplateNotification('‚úÖ Template Gerado!', 
            `Template padr√£o criado com ${STANDARD_COLUMNS.length} colunas.\nArquivo: ${fileName}`, 
            'success'
        );
        
        return true;
        
    } catch (error) {
        console.error('‚ùå [EXCEL-TEMPLATE] Erro ao gerar template:', error);
        showTemplateNotification('‚ùå Erro', 
            `Erro ao gerar template: ${error.message}`, 
            'error'
        );
        return false;
    }
}

function addHeaderComments(worksheet) {
    // Adicionar coment√°rios informativos nas c√©lulas importantes
    const comments = {
        'A1': 'Nome do projeto principal (obrigat√≥rio)',
        'B1': 'Sub divis√£o do projeto (opcional)',
        'C1': 'Tipo da a√ß√£o a ser executada (obrigat√≥rio)',
        'F1': 'Endere√ßo completo do local (obrigat√≥rio)',
        'G1': 'Cidade onde ser√° executado (obrigat√≥rio)',
        'Q1': 'Nome da equipe respons√°vel (obrigat√≥rio)',
        'R1': 'Nome do supervisor (obrigat√≥rio)',
        'S1': 'Status atual do trabalho (obrigat√≥rio)'
    };
    
    Object.entries(comments).forEach(([cell, comment]) => {
        if (!worksheet[cell]) worksheet[cell] = { v: '', t: 's' };
        if (!worksheet[cell].c) worksheet[cell].c = [];
        worksheet[cell].c.push({
            a: 'Sistema',
            t: comment
        });
    });
}

// ============= VALIDA√á√ÉO DE UPLOAD =============
function validateUploadAgainstStandard(excelData, headers) {
    console.log('üîç [EXCEL-TEMPLATE] Validando upload contra padr√£o...');
    
    const validationResults = {
        isValid: true,
        warnings: [],
        errors: [],
        mappingSuggestions: {}
    };
    
    // 1. Verificar se todas as colunas essenciais est√£o presentes
    const essentialColumns = STANDARD_COLUMNS.filter(col => 
        COLUMN_VALIDATION[col]?.required === true
    );
    
    essentialColumns.forEach(essentialCol => {
        const found = headers.find(header => 
            header.toLowerCase().trim() === essentialCol.toLowerCase().trim()
        );
        
        if (!found) {
            // Procurar poss√≠vel correspond√™ncia
            const possibleMatch = findSimilarColumn(essentialCol, headers);
            if (possibleMatch) {
                validationResults.mappingSuggestions[essentialCol] = possibleMatch;
                validationResults.warnings.push(
                    `Coluna '${essentialCol}' n√£o encontrada. Sugest√£o: usar '${possibleMatch}'`
                );
            } else {
                validationResults.errors.push(
                    `Coluna obrigat√≥ria '${essentialCol}' n√£o encontrada`
                );
                validationResults.isValid = false;
            }
        }
    });
    
    // 2. Verificar colunas extras n√£o padronizadas
    const extraColumns = headers.filter(header => 
        !STANDARD_COLUMNS.some(standardCol => 
            standardCol.toLowerCase().trim() === header.toLowerCase().trim()
        )
    );
    
    if (extraColumns.length > 0) {
        validationResults.warnings.push(
            `Colunas n√£o padronizadas encontradas: ${extraColumns.join(', ')}`
        );
    }
    
    // 3. Validar tipos de dados das primeiras linhas
    if (excelData && excelData.length > 0) {
        validateDataTypes(excelData.slice(0, 5), validationResults);
    }
    
    console.log('üìä [EXCEL-TEMPLATE] Valida√ß√£o conclu√≠da:', validationResults);
    
    return validationResults;
}

function findSimilarColumn(targetColumn, availableColumns) {
    const target = targetColumn.toLowerCase();
    
    // Mapeamentos de similaridade
    const similarities = {
        'projeto': ['project', 'proj', 'projetos'],
        'sub projeto': ['subprojeto', 'sub-projeto', 'subproject'],
        'tipo de a√ß√£o': ['tipo', 'acao', 'a√ß√£o', 'action', 'tipo_acao'],
        'endere√ßo': ['endereco', 'address', 'logradouro'],
        'cidade': ['city', 'municipio', 'munic√≠pio'],
        'equipe': ['team', 'grupo', 'equipa'],
        'supervisor': ['responsavel', 'respons√°vel', 'lider', 'l√≠der']
    };
    
    for (const column of availableColumns) {
        const columnLower = column.toLowerCase();
        
        // Correspond√™ncia exata
        if (columnLower === target) return column;
        
        // Correspond√™ncia por similaridade
        const targetSimilars = similarities[target];
        if (targetSimilars && targetSimilars.some(sim => columnLower.includes(sim))) {
            return column;
        }
    }
    
    return null;
}

function validateDataTypes(sampleData, validationResults) {
    sampleData.forEach((row, rowIndex) => {
        Object.entries(row).forEach(([column, value]) => {
            const validation = COLUMN_VALIDATION[column];
            if (!validation || !value) return;
            
            const lineRef = `Linha ${rowIndex + 2}`;
            
            switch (validation.type) {
                case 'date':
                    if (value && !isValidDate(value)) {
                        validationResults.warnings.push(
                            `${lineRef}, coluna '${column}': Formato de data inv√°lido '${value}'. Use dd/mm/yyyy`
                        );
                    }
                    break;
                    
                case 'number':
                    if (value && isNaN(Number(value))) {
                        validationResults.warnings.push(
                            `${lineRef}, coluna '${column}': Valor num√©rico inv√°lido '${value}'`
                        );
                    }
                    break;
                    
                case 'select':
                    if (value && validation.options && !validation.options.includes(value)) {
                        validationResults.warnings.push(
                            `${lineRef}, coluna '${column}': Valor '${value}' n√£o est√° entre as op√ß√µes v√°lidas: ${validation.options.join(', ')}`
                        );
                    }
                    break;
            }
            
            // Verificar comprimento m√°ximo
            if (validation.maxLength && String(value).length > validation.maxLength) {
                validationResults.warnings.push(
                    `${lineRef}, coluna '${column}': Texto muito longo (${String(value).length}/${validation.maxLength} caracteres)`
                );
            }
        });
    });
}

function isValidDate(dateString) {
    if (typeof dateString !== 'string') return false;
    
    const brazilianDatePattern = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
    return brazilianDatePattern.test(dateString);
}

// ============= INTERFACE =============
function showValidationResults(validationResults) {
    let message = 'üìã VALIDA√á√ÉO DO UPLOAD\n\n';
    
    if (validationResults.isValid) {
        message += '‚úÖ Upload est√° em conformidade com o padr√£o!\n\n';
    } else {
        message += '‚ùå Upload possui problemas que precisam ser corrigidos!\n\n';
    }
    
    if (validationResults.errors.length > 0) {
        message += 'üö® ERROS:\n';
        validationResults.errors.forEach(error => {
            message += `‚Ä¢ ${error}\n`;
        });
        message += '\n';
    }
    
    if (validationResults.warnings.length > 0) {
        message += '‚ö†Ô∏è AVISOS:\n';
        validationResults.warnings.slice(0, 5).forEach(warning => {
            message += `‚Ä¢ ${warning}\n`;
        });
        if (validationResults.warnings.length > 5) {
            message += `... e mais ${validationResults.warnings.length - 5} avisos\n`;
        }
        message += '\n';
    }
    
    if (Object.keys(validationResults.mappingSuggestions).length > 0) {
        message += 'üí° SUGEST√ïES DE MAPEAMENTO:\n';
        Object.entries(validationResults.mappingSuggestions).forEach(([standard, suggested]) => {
            message += `‚Ä¢ '${standard}' ‚Üí '${suggested}'\n`;
        });
    }
    
    showTemplateNotification(
        validationResults.isValid ? '‚úÖ Valida√ß√£o OK' : '‚ö†Ô∏è Valida√ß√£o',
        message,
        validationResults.isValid ? 'success' : 'warning'
    );
    
    return validationResults.isValid || confirm(
        message + '\n\nDeseja continuar mesmo com os problemas identificados?'
    );
}

// ============= BOT√ÉO DE TEMPLATE =============
function addTemplateButton() {
    console.log('üîò [EXCEL-TEMPLATE] Adicionando bot√£o de template...');
    
    const uploadSection = document.querySelector('.upload-section, .file-upload-section');
    if (!uploadSection) {
        console.warn('‚ö†Ô∏è [EXCEL-TEMPLATE] Se√ß√£o de upload n√£o encontrada');
        return;
    }
    
    // Verificar se bot√£o j√° existe
    if (document.getElementById('downloadTemplateBtn')) {
        console.log('‚úÖ [EXCEL-TEMPLATE] Bot√£o j√° existe');
        return;
    }
    
    const templateButton = document.createElement('button');
    templateButton.id = 'downloadTemplateBtn';
    templateButton.className = 'btn btn-outline-primary';
    templateButton.style.cssText = `
        margin-left: 10px;
        padding: 8px 16px;
        border: 2px solid #007bff;
        background: white;
        color: #007bff;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.3s ease;
    `;
    
    templateButton.innerHTML = `
        <span style="margin-right: 5px;">üìã</span>
        Baixar Template Padr√£o
    `;
    
    templateButton.addEventListener('mouseenter', () => {
        templateButton.style.backgroundColor = '#007bff';
        templateButton.style.color = 'white';
    });
    
    templateButton.addEventListener('mouseleave', () => {
        templateButton.style.backgroundColor = 'white';
        templateButton.style.color = '#007bff';
    });
    
    templateButton.addEventListener('click', () => {
        console.log('üñ±Ô∏è [EXCEL-TEMPLATE] Bot√£o clicado');
        generateStandardTemplate();
    });
    
    // Adicionar ap√≥s o bot√£o de upload
    const uploadButton = uploadSection.querySelector('button, .btn-upload, input[type="file"]');
    if (uploadButton) {
        uploadButton.parentNode.insertBefore(templateButton, uploadButton.nextSibling);
    } else {
        uploadSection.appendChild(templateButton);
    }
    
    console.log('‚úÖ [EXCEL-TEMPLATE] Bot√£o de template adicionado');
}

// ============= UTILIT√ÅRIAS =============
function showTemplateNotification(title, message, type) {
    if (window.showCustomNotification) {
        window.showCustomNotification(title, message, type);
    } else if (window.showNotification) {
        window.showNotification(title, message, type);
    } else {
        alert(`${title}:\n\n${message}`);
    }
}

// ============= INICIALIZA√á√ÉO =============
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        addTemplateButton();
    }, 2000);
});

// ============= INTEGRA√á√ÉO COM SISTEMA EXISTENTE =============
// Substituir fun√ß√£o de valida√ß√£o no sistema principal
if (window.handleCompleteExcelUpload) {
    const originalHandler = window.handleCompleteExcelUpload;
    
    window.handleCompleteExcelUpload = async function(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        try {
            // Ler arquivo primeiro para valida√ß√£o
            const result = await readCompleteExcelFile(file);
            
            // Validar contra padr√£o
            const validation = validateUploadAgainstStandard(result.data, result.headers);
            
            // Mostrar resultados da valida√ß√£o
            const proceed = showValidationResults(validation);
            
            if (proceed) {
                // Chamar handler original se valida√ß√£o passou ou usu√°rio aceitou
                return originalHandler.call(this, event);
            } else {
                event.target.value = '';
                return;
            }
            
        } catch (error) {
            console.error('‚ùå [EXCEL-TEMPLATE] Erro na valida√ß√£o:', error);
            showTemplateNotification('‚ùå Erro', `Erro na valida√ß√£o: ${error.message}`, 'error');
            event.target.value = '';
        }
    };
}

// ============= EXPORTA√á√ÉO =============
window.STANDARD_COLUMNS = STANDARD_COLUMNS;
window.COLUMN_VALIDATION = COLUMN_VALIDATION;
window.generateStandardTemplate = generateStandardTemplate;
window.validateUploadAgainstStandard = validateUploadAgainstStandard;

console.log('‚úÖ [EXCEL-TEMPLATE] Sistema de template padr√£o carregado');
console.log(`üìã [EXCEL-TEMPLATE] ${STANDARD_COLUMNS.length} colunas padr√£o definidas`);