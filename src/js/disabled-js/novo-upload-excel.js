// ============= NOVO SISTEMA DE UPLOAD EXCEL SIMPLIFICADO =============
console.log('üìä [NOVO-UPLOAD] Inicializando sistema de upload Excel...');

// ============= COLUNAS EXATAS DA TABELA =============
const COLUNAS_TABELA = [
    'Projeto', 'Sub Projeto', 'Tipo de A√ß√£o', 'CONTRATO', 'Condominio',
    'ENDERE√áO', 'Cidade', 'PEP', 'COD IMOVEL GED', 'NODE GERENCIAL',
    '√Årea T√©cnica', 'HP', 'ANDAR', 'DATA RECEBIMENTO', 'DATA INICIO',
    'DATA FINAL', 'EQUIPE', 'Supervisor', 'Status', 'RDO', 'BOOK',
    'PROJETO', 'JUSTIFICATIVA', 'Observa√ß√£o', 'Observa√ß√£o'
];

// ============= VARI√ÅVEIS GLOBAIS =============
let dadosTabela = [];
let contadorRegistros = 0;

// ============= INICIALIZA√á√ÉO =============
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß [NOVO-UPLOAD] Configurando sistema...');
    
    // Aguardar bibliotecas carregarem
    setTimeout(() => {
        configurarNovoUpload();
        tentarCarregarDados();
    }, 1000);
});

function configurarNovoUpload() {
    const input = document.getElementById('novoExcelUpload');
    if (input) {
        input.addEventListener('change', processarArquivoExcel);
        console.log('‚úÖ [NOVO-UPLOAD] Listener configurado');
    } else {
        console.warn('‚ö†Ô∏è [NOVO-UPLOAD] Input n√£o encontrado');
    }
}

// ============= PROCESSAMENTO DO ARQUIVO =============
async function processarArquivoExcel(event) {
    const arquivo = event.target.files[0];
    if (!arquivo) return;
    
    console.log('üìÇ [NOVO-UPLOAD] Processando:', arquivo.name);
    
    try {
        // Verificar se XLSX est√° dispon√≠vel
        if (typeof XLSX === 'undefined') {
            alert('‚ùå Biblioteca XLSX n√£o carregada. Recarregue a p√°gina e tente novamente.');
            return;
        }
        
        // Ler arquivo
        const dados = await lerExcel(arquivo);
        
        // Processar dados
        const processados = processarDados(dados);
        
        // Confirmar upload
        if (confirm(`üìä Encontrados ${processados.length} registros.\n\nDeseja fazer o upload?`)) {
            await salvarDados(processados);
            await exibirNaTabela(processados);
            alert(`‚úÖ Upload conclu√≠do! ${processados.length} registros importados.`);
        }
        
    } catch (error) {
        console.error('‚ùå [NOVO-UPLOAD] Erro:', error);
        alert(`‚ùå Erro no upload: ${error.message}`);
    } finally {
        event.target.value = ''; // Limpar input
    }
}

function lerExcel(arquivo) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        
        reader.onload = function(e) {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const planilha = workbook.Sheets[workbook.SheetNames[0]];
                const json = XLSX.utils.sheet_to_json(planilha, { header: 1 });
                
                if (json.length < 2) {
                    throw new Error('Planilha vazia ou sem dados');
                }
                
                resolve(json);
            } catch (error) {
                reject(error);
            }
        };
        
        reader.onerror = () => reject(new Error('Erro ao ler arquivo'));
        reader.readAsArrayBuffer(arquivo);
    });
}

function processarDados(jsonData) {
    console.log('üîÑ [NOVO-UPLOAD] Processando dados...');
    
    const headers = jsonData[0];
    const linhas = jsonData.slice(1);
    
    // Validar colunas
    if (headers.length !== COLUNAS_TABELA.length) {
        throw new Error(`Esperado ${COLUNAS_TABELA.length} colunas, encontrado ${headers.length}`);
    }
    
    // Processar cada linha
    const processados = linhas
        .filter(linha => linha && linha.length > 0) // Filtrar linhas vazias
        .map((linha, index) => {
            const registro = {};
            
            COLUNAS_TABELA.forEach((coluna, i) => {
                let valor = linha[i] || '';
                
                // Tratar valores especiais
                if (typeof valor === 'string') {
                    valor = valor.trim();
                }
                
                // Tratar HP como n√∫mero
                if (coluna === 'HP' && valor !== '') {
                    valor = parseInt(valor) || 0;
                }
                
                // Tratar datas
                if (coluna.includes('DATA') && valor !== '') {
                    valor = formatarData(valor);
                }
                
                // Para segunda coluna "Observa√ß√£o"
                if (coluna === 'Observa√ß√£o' && i === 24) {
                    registro['Observacao2'] = valor;
                } else {
                    registro[coluna] = valor;
                }
            });
            
            // Adicionar metadados
            registro._linha = index + 2; // +2 porque come√ßa na linha 2 do Excel
            registro._timestamp = new Date().toISOString();
            
            return registro;
        });
    
    console.log('‚úÖ [NOVO-UPLOAD] Processados:', processados.length, 'registros');
    return processados;
}

function formatarData(valor) {
    if (!valor) return '';
    
    try {
        // Se j√° est√° no formato dd/mm/yyyy
        if (typeof valor === 'string' && /^\d{1,2}\/\d{1,2}\/\d{4}$/.test(valor)) {
            return valor;
        }
        
        // Converter para data
        const data = new Date(valor);
        if (!isNaN(data.getTime())) {
            return data.toLocaleDateString('pt-BR');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è [NOVO-UPLOAD] Erro ao formatar data:', valor);
    }
    
    return valor;
}

// ============= SALVAR NO FIRESTORE =============
async function salvarDados(dados) {
    console.log('üíæ [NOVO-UPLOAD] Salvando no Firestore...');
    
    if (!window.firebase || !firebase.firestore) {
        throw new Error('Firebase n√£o dispon√≠vel');
    }
    
    const db = firebase.firestore();
    const batch = db.batch();
    
    // Criar collection "enderecos_mdu"
    dados.forEach(registro => {
        const docRef = db.collection('enderecos_mdu').doc();
        const dadosParaSalvar = {
            ...registro,
            uploadedAt: firebase.firestore.FieldValue.serverTimestamp(),
            source: 'novo_upload_excel'
        };
        batch.set(docRef, dadosParaSalvar);
    });
    
    await batch.commit();
    console.log('‚úÖ [NOVO-UPLOAD] Dados salvos no Firestore');
}

// ============= EXIBIR NA TABELA =============
async function exibirNaTabela(dados) {
    console.log('üìä [NOVO-UPLOAD] Exibindo na tabela...');
    
    const tbody = document.getElementById('enderecoTableBody');
    if (!tbody) {
        throw new Error('Tabela n√£o encontrada');
    }
    
    // Limpar tabela
    tbody.innerHTML = '';
    
    // Armazenar dados globalmente
    dadosTabela = dados;
    contadorRegistros = dados.length;
    
    // Adicionar linhas
    dados.forEach((registro, index) => {
        const tr = criarLinhaTabela(registro, index);
        tbody.appendChild(tr);
    });
    
    // Atualizar contadores
    atualizarContadores();
    
    console.log('‚úÖ [NOVO-UPLOAD] Tabela atualizada');
}

function criarLinhaTabela(dados, index) {
    const tr = document.createElement('tr');
    
    // Adicionar c√©lulas para cada coluna
    COLUNAS_TABELA.forEach((coluna, i) => {
        const td = document.createElement('td');
        
        let valor = '';
        if (coluna === 'Observa√ß√£o' && i === 24) {
            valor = dados['Observacao2'] || '';
        } else {
            valor = dados[coluna] || '';
        }
        
        td.textContent = valor;
        tr.appendChild(td);
    });
    
    // Coluna de a√ß√µes
    const tdAcoes = document.createElement('td');
    tdAcoes.innerHTML = `
        <button onclick="editarRegistro(${index})" class="btn-edit" title="Editar">
            ‚úèÔ∏è
        </button>
        <button onclick="excluirRegistro(${index})" class="btn-delete" title="Excluir">
            üóëÔ∏è
        </button>
    `;
    tr.appendChild(tdAcoes);
    
    return tr;
}

function atualizarContadores() {
    // Atualizar cards de estat√≠sticas
    const totalElement = document.getElementById('statTotalRegistros');
    if (totalElement) {
        totalElement.textContent = contadorRegistros;
    }
    
    // Calcular endere√ßos √∫nicos
    if (dadosTabela.length > 0) {
        const enderecosUnicos = new Set(dadosTabela.map(item => item['ENDERE√áO'] || '').filter(e => e.trim()));
        const enderecoElement = document.getElementById('statEnderecosDistintos');
        if (enderecoElement) {
            enderecoElement.textContent = enderecosUnicos.size;
        }
        
        // Calcular equipes √∫nicas
        const equipesUnicas = new Set(dadosTabela.map(item => item['EQUIPE'] || '').filter(e => e.trim()));
        const equipeElement = document.getElementById('statEquipesDistintas');
        if (equipeElement) {
            equipeElement.textContent = equipesUnicas.size;
        }
        
        // Calcular produtividade
        const produtivos = dadosTabela.filter(item => (item['Status'] || '').toUpperCase() === 'PRODUTIVA').length;
        const produtividade = contadorRegistros > 0 ? Math.round((produtivos / contadorRegistros) * 100) : 0;
        const prodElement = document.getElementById('statProdutividade');
        if (prodElement) {
            prodElement.textContent = `${produtividade}%`;
        }
    }
}

// ============= CARREGAR DADOS EXISTENTES =============
async function tentarCarregarDados() {
    try {
        if (window.firebase && firebase.firestore) {
            const snapshot = await firebase.firestore()
                .collection('enderecos_mdu')
                .orderBy('uploadedAt', 'desc')
                .limit(100)
                .get();
            
            if (!snapshot.empty) {
                const dados = [];
                snapshot.forEach(doc => {
                    dados.push({ ...doc.data(), _id: doc.id });
                });
                
                await exibirNaTabela(dados);
                console.log('‚úÖ [NOVO-UPLOAD] Dados existentes carregados');
            }
        }
    } catch (error) {
        console.log('‚ÑπÔ∏è [NOVO-UPLOAD] Sem dados existentes ou erro:', error.message);
    }
}

// ============= FUN√á√ÉO DE RECARREGAMENTO =============
function recarregarDados() {
    console.log('üîÑ [NOVO-UPLOAD] Recarregando...');
    tentarCarregarDados();
}

// ============= A√á√ïES DOS BOT√ïES =============
window.editarRegistro = function(index) {
    alert('‚ö†Ô∏è Fun√ß√£o de edi√ß√£o ser√° implementada em breve');
};

window.excluirRegistro = function(index) {
    if (confirm('Tem certeza que deseja excluir este registro?')) {
        dadosTabela.splice(index, 1);
        contadorRegistros--;
        exibirNaTabela(dadosTabela);
        alert('‚úÖ Registro exclu√≠do');
    }
};

// ============= SUBSTITUIR FUN√á√ÉO ANTIGA =============
window.reloadCompleteInterface = recarregarDados;

// ============= EXPORTA√á√ÉO GLOBAL =============
window.dadosTabela = dadosTabela;
window.recarregarDados = recarregarDados;

console.log('‚úÖ [NOVO-UPLOAD] Sistema carregado e pronto!');