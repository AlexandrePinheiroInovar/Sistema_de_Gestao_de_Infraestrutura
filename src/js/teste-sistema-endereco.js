// ============= SISTEMA DE TESTE PARA ENDERE√áOS =============
console.log('üß™ [TESTE-ENDERECO] Sistema de testes carregado');

// Fun√ß√£o principal de teste
window.testarSistemaCompleto = async function() {
    console.log('üöÄ [TESTE-ENDERECO] === INICIANDO TESTES COMPLETOS ===');
    
    const resultados = {
        layoutEdicaoSimplificado: false,
        campoPEPDisponivel: false,
        historicoFuncionando: false,
        seletoresComDados: false,
        sistemaFuncionando: false
    };
    
    try {
        // Teste 1: Verificar se layout de edi√ß√£o est√° simplificado
        console.log('1Ô∏è‚É£ [TESTE] Verificando layout de edi√ß√£o simplificado...');
        resultados.layoutEdicaoSimplificado = testarLayoutEdicaoSimplificado();
        
        // Teste 2: Verificar campo PEP
        console.log('2Ô∏è‚É£ [TESTE] Verificando campo PEP...');
        resultados.campoPEPDisponivel = testarCampoPEP();
        
        // Teste 3: Verificar sistema de hist√≥rico
        console.log('3Ô∏è‚É£ [TESTE] Verificando sistema de hist√≥rico...');
        resultados.historicoFuncionando = testarSistemaHistorico();
        
        // Teste 4: Verificar seletores com dados da tabela
        console.log('4Ô∏è‚É£ [TESTE] Verificando seletores...');
        resultados.seletoresComDados = await testarSeletores();
        
        // Teste 5: Verificar sistema geral
        console.log('5Ô∏è‚É£ [TESTE] Verificando sistema geral...');
        resultados.sistemaFuncionando = testarSistemaGeral();
        
        // Relat√≥rio final
        gerarRelatorioTestes(resultados);
        
        return resultados;
        
    } catch (error) {
        console.error('‚ùå [TESTE] Erro durante os testes:', error);
        return resultados;
    }
};

// Teste 1: Layout de edi√ß√£o simplificado
function testarLayoutEdicaoSimplificado() {
    console.log('   üîç Verificando se fun√ß√£o openEditModal existe...');
    
    if (typeof window.editFirebaseTableRecord !== 'function') {
        console.log('   ‚ùå Fun√ß√£o editFirebaseTableRecord n√£o encontrada');
        return false;
    }
    
    // Verificar se modal existe
    const modal = document.getElementById('crudModal');
    if (!modal) {
        console.log('   ‚ùå Modal crudModal n√£o encontrado');
        return false;
    }
    
    // Verificar se form existe
    const form = document.getElementById('enderecoForm');
    if (!form) {
        console.log('   ‚ùå Formul√°rio enderecoForm n√£o encontrado');
        return false;
    }
    
    console.log('   ‚úÖ Layout de edi√ß√£o simplificado funcionando');
    return true;
}

// Teste 2: Campo PEP
function testarCampoPEP() {
    console.log('   üîç Verificando campo PEP...');
    
    const selectPEP = document.getElementById('pep');
    if (!selectPEP) {
        console.log('   ‚ùå Campo PEP n√£o encontrado');
        return false;
    }
    
    console.log('   ‚úÖ Campo PEP encontrado');
    
    // Verificar se tem op√ß√µes (ser√° testado com dados reais)
    if (selectPEP.children.length > 1) {
        console.log(`   ‚úÖ Campo PEP tem ${selectPEP.children.length - 1} op√ß√µes`);
    } else {
        console.log('   ‚ö†Ô∏è Campo PEP sem dados (normal se n√£o h√° dados na tabela)');
    }
    
    return true;
}

// Teste 3: Sistema de hist√≥rico
function testarSistemaHistorico() {
    console.log('   üîç Verificando sistema de hist√≥rico...');
    
    // Verificar se fun√ß√£o de hist√≥rico existe
    if (typeof window.visualizarHistorico !== 'function') {
        console.log('   ‚ùå Fun√ß√£o visualizarHistorico n√£o encontrada');
        return false;
    }
    
    if (typeof window.salvarLogAlteracao !== 'function') {
        console.log('   ‚ùå Fun√ß√£o salvarLogAlteracao n√£o encontrada');
        return false;
    }
    
    console.log('   ‚úÖ Fun√ß√µes de hist√≥rico encontradas');
    
    // Verificar se Firebase est√° dispon√≠vel
    if (!window.firebase || !window.firebase.firestore) {
        console.log('   ‚ö†Ô∏è Firebase n√£o dispon√≠vel - hist√≥rico pode n√£o funcionar');
        return false;
    }
    
    console.log('   ‚úÖ Sistema de hist√≥rico configurado');
    return true;
}

// Teste 4: Seletores com dados
async function testarSeletores() {
    console.log('   üîç Verificando seletores...');
    
    // Verificar se fun√ß√£o de extrair dados existe
    if (typeof window.NovoEndereco === 'undefined' || 
        typeof window.NovoEndereco.extrairDadosUnicosDaTabela !== 'function') {
        console.log('   ‚ùå Fun√ß√£o extrairDadosUnicosDaTabela n√£o encontrada');
        return false;
    }
    
    // Testar extra√ß√£o de dados
    try {
        const dados = window.NovoEndereco.extrairDadosUnicosDaTabela();
        console.log(`   üìä Dados extra√≠dos: PEP=${dados.pep.length}, Projetos=${dados.projeto.length}`);
        
        if (dados.pep.length > 0) {
            console.log('   ‚úÖ Dados PEP extra√≠dos da tabela');
            return true;
        } else {
            console.log('   ‚ö†Ô∏è Nenhum dado PEP encontrado (normal se tabela vazia)');
            return true; // N√£o √© erro se n√£o h√° dados
        }
    } catch (error) {
        console.log('   ‚ùå Erro ao extrair dados:', error.message);
        return false;
    }
}

// Teste 5: Sistema geral
function testarSistemaGeral() {
    console.log('   üîç Verificando sistema geral...');
    
    // Verificar se tabela existe
    const tbody = document.getElementById('enderecoTableBody');
    if (!tbody) {
        console.log('   ‚ùå Tabela enderecoTableBody n√£o encontrada');
        return false;
    }
    
    // Verificar se bot√µes de a√ß√£o existem
    const botaoHistorico = document.querySelector('button[onclick*="visualizarHistorico"]');
    if (!botaoHistorico) {
        console.log('   ‚ö†Ô∏è Bot√£o de hist√≥rico n√£o encontrado na tabela (normal se tabela vazia)');
    } else {
        console.log('   ‚úÖ Bot√£o de hist√≥rico encontrado na tabela');
    }
    
    // Verificar se novo endere√ßo funciona
    if (typeof window.novoEnderecoLimpo !== 'function') {
        console.log('   ‚ùå Fun√ß√£o novoEnderecoLimpo n√£o encontrada');
        return false;
    }
    
    console.log('   ‚úÖ Sistema geral funcionando');
    return true;
}

// Gerar relat√≥rio de testes
function gerarRelatorioTestes(resultados) {
    console.log('üìã [TESTE] === RELAT√ìRIO FINAL ===');
    
    const total = Object.keys(resultados).length;
    const sucessos = Object.values(resultados).filter(r => r === true).length;
    const porcentagem = Math.round((sucessos / total) * 100);
    
    console.log(`üéØ [TESTE] Sucessos: ${sucessos}/${total} (${porcentagem}%)`);
    
    for (const [teste, resultado] of Object.entries(resultados)) {
        const status = resultado ? '‚úÖ' : '‚ùå';
        const descricao = obterDescricaoTeste(teste);
        console.log(`${status} [TESTE] ${descricao}`);
    }
    
    if (porcentagem >= 80) {
        console.log('üéâ [TESTE] Sistema aprovado nos testes!');
    } else if (porcentagem >= 60) {
        console.log('‚ö†Ô∏è [TESTE] Sistema parcialmente funcional');
    } else {
        console.log('‚ùå [TESTE] Sistema precisa de corre√ß√µes');
    }
    
    console.log('üí° [TESTE] Para testar manualmente:');
    console.log('   1. Clique em "Novo Endere√ßo" e verifique se PEP tem op√ß√µes');
    console.log('   2. Edite um registro e verifique se abre com dados populados');
    console.log('   3. Clique no bot√£o üìã para ver hist√≥rico');
    console.log('   4. Crie/edite/exclua registros e verifique se hist√≥rico √© salvo');
}

function obterDescricaoTeste(teste) {
    const descricoes = {
        layoutEdicaoSimplificado: 'Layout de edi√ß√£o simplificado',
        campoPEPDisponivel: 'Campo PEP dispon√≠vel',
        historicoFuncionando: 'Sistema de hist√≥rico funcionando',
        seletoresComDados: 'Seletores com dados da tabela',
        sistemaFuncionando: 'Sistema geral funcionando'
    };
    return descricoes[teste] || teste;
}

// Fun√ß√£o para testar apenas hist√≥rico com dados reais
window.testarHistoricoReal = async function(recordId) {
    if (!recordId) {
        console.log('‚ö†Ô∏è [TESTE-HISTORICO] Forne√ßa um ID de registro v√°lido');
        return;
    }
    
    console.log(`üß™ [TESTE-HISTORICO] Testando hist√≥rico para ID: ${recordId}`);
    
    try {
        await window.visualizarHistorico(recordId);
        console.log('‚úÖ [TESTE-HISTORICO] Hist√≥rico testado com sucesso');
    } catch (error) {
        console.error('‚ùå [TESTE-HISTORICO] Erro ao testar hist√≥rico:', error);
    }
};

// Fun√ß√£o para simular cria√ß√£o de log
window.testarCriacaoLog = async function() {
    console.log('üß™ [TESTE-LOG] Testando cria√ß√£o de log...');
    
    if (typeof window.salvarLogAlteracao !== 'function') {
        console.log('‚ùå [TESTE-LOG] Fun√ß√£o salvarLogAlteracao n√£o dispon√≠vel');
        return;
    }
    
    const dadosAntigos = { teste: 'valor antigo' };
    const dadosNovos = { teste: 'valor novo', campo2: 'novo campo' };
    
    try {
        const logId = await window.salvarLogAlteracao('teste123', dadosAntigos, dadosNovos, 'test');
        console.log(`‚úÖ [TESTE-LOG] Log criado com ID: ${logId}`);
        return logId;
    } catch (error) {
        console.error('‚ùå [TESTE-LOG] Erro ao criar log:', error);
        return null;
    }
};

console.log('üß™ [TESTE-ENDERECO] Fun√ß√µes de teste carregadas');
console.log('üí° [TESTE-ENDERECO] Execute: testarSistemaCompleto()');