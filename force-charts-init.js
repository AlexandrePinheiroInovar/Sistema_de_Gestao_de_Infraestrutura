// ============= FOR√áAR INICIALIZA√á√ÉO DOS GR√ÅFICOS =============
// Script para garantir que os gr√°ficos sempre inicializem
console.log('üî• [FORCE-CHARTS] Carregando sistema de for√ßa bruta para gr√°ficos...');

// Fun√ß√£o para for√ßar inicializa√ß√£o dos gr√°ficos
function forcarInicializacaoGraficos() {
    console.log('üöÄ [FORCE-CHARTS] Executando inicializa√ß√£o for√ßada...');
    
    // Verificar depend√™ncias
    const temChart = typeof Chart !== 'undefined';
    const temChartsDashboard = typeof ChartsDashboard !== 'undefined';
    const temInicializar = temChartsDashboard && typeof ChartsDashboard.inicializar === 'function';
    
    console.log('üìä [FORCE-CHARTS] Status das depend√™ncias:');
    console.log('  - Chart.js:', temChart ? '‚úÖ' : '‚ùå');
    console.log('  - ChartsDashboard:', temChartsDashboard ? '‚úÖ' : '‚ùå');
    console.log('  - ChartsDashboard.inicializar:', temInicializar ? '‚úÖ' : '‚ùå');
    
    if (temChart && temChartsDashboard && temInicializar) {
        try {
            // Garantir que o container existe e est√° vis√≠vel
            const container = document.getElementById('charts-rankings-container');
            if (container) {
                container.style.display = 'block';
                container.style.visibility = 'visible';
                container.style.opacity = '1';
                console.log('‚úÖ [FORCE-CHARTS] Container for√ßado como vis√≠vel');
            }
            
            // Destruir qualquer gr√°fico existente
            if (ChartsDashboard.destruirGraficos) {
                ChartsDashboard.destruirGraficos();
            }
            
            // Resetar estado
            ChartsDashboard.isInitialized = false;
            
            // Inicializar sistema
            ChartsDashboard.inicializar();
            
            console.log('‚úÖ [FORCE-CHARTS] Inicializa√ß√£o executada com sucesso!');
            
            // Verificar se realmente inicializou
            setTimeout(() => {
                if (ChartsDashboard.isInitialized) {
                    console.log('‚úÖ [FORCE-CHARTS] Sistema confirmado como inicializado!');
                } else {
                    console.error('‚ùå [FORCE-CHARTS] Sistema n√£o se marcou como inicializado');
                    // Tentar novamente
                    setTimeout(forcarInicializacaoGraficos, 2000);
                }
            }, 1000);
            
        } catch (error) {
            console.error('‚ùå [FORCE-CHARTS] Erro durante inicializa√ß√£o:', error);
            
            // Tentar novamente em 3 segundos
            setTimeout(forcarInicializacaoGraficos, 3000);
        }
    } else {
        console.warn('‚ö†Ô∏è [FORCE-CHARTS] Depend√™ncias n√£o dispon√≠veis, tentando novamente em 2s...');
        setTimeout(forcarInicializacaoGraficos, 2000);
    }
}

// Fun√ß√£o p√∫blica para for√ßar gr√°ficos
window.forcarGraficos = function() {
    console.log('üî• [FORCE-CHARTS] Chamada manual para for√ßar gr√°ficos...');
    forcarInicializacaoGraficos();
};

// M√∫ltiplas tentativas de inicializa√ß√£o
setTimeout(forcarInicializacaoGraficos, 1000);  // 1 segundo
setTimeout(forcarInicializacaoGraficos, 3000);  // 3 segundos  
setTimeout(forcarInicializacaoGraficos, 5000);  // 5 segundos
setTimeout(forcarInicializacaoGraficos, 10000); // 10 segundos

// Escutar eventos do DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ [FORCE-CHARTS] DOM carregado, tentando inicializa√ß√£o...');
    setTimeout(forcarInicializacaoGraficos, 500);
});

// Escutar quando scripts carregarem
window.addEventListener('load', function() {
    console.log('üåê [FORCE-CHARTS] Window carregada, tentando inicializa√ß√£o...');
    setTimeout(forcarInicializacaoGraficos, 500);
});

console.log('‚úÖ [FORCE-CHARTS] Sistema de for√ßa bruta carregado - m√∫ltiplas tentativas agendadas');